(defvar *transaction* (list))

(defvar *changelog* (list))

(defun commit ()
  (display (str-value `(progn ,@*changelog*) false))
  (setf *changelog* (list))
  (setf *transaction* (list)))

(defun rollback ()
  (setf *changelog* (list))
  (do () ((zero? (length *transaction*)))
    (funcall (pop *transaction*))))

(defmacro defrecord (name fields)
  `(progn
     (defvar ,name (js-object ,@(map (lambda (f)
                                       `(,f (list)))
                                     fields)))
     (defun ,name ,fields
       (let ((id (length (. ,name ,(first fields)))))
         ,@(map (lambda (f)
                  `(push ,f (. ,name ,f)))
                fields)
         (push (lambda ()
                 ,@(map (lambda (f)
                          `(pop (. ,name ,f)))
                        fields))
               *transaction*)
         (push `(,',name ,,@fields) *changelog*)
         (list ',name id)))
     ,@(map (lambda (f)
              `(defmethod ,f (record) (= (first record) ',name)
                 (aref (. ,name ,f) (second record))))
            fields)
     ,@(map (lambda (f)
              `(defmethod ,#"set-{f}" (record value) (= (first record) ',name)
                 (let* ((r (second record))
                        (old-value (aref (. ,name ,f) r)))
                   (push `(setf (aref (. ,',name ,',f) ,r) ,value)
                         *changelog*)
                   (push (lambda () (setf (aref (. ,name ,f) r) old-value))
                         *transaction*))
                 (setf (aref (. ,name ,f) (second record)) value)))
            fields)
     (defmacro ,#"foreach-{name}" (var &rest body)
       (let ((rno (gensym)))
         `(dotimes (,rno (length (. ,',name ,',(first fields))))
            (let ((,var (list ',',name ,rno)))
              ,@body))))
     ',name))
