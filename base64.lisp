
(defconstant +ALPHABET+ "ABCDEFGHIJKLMNOPQRSTUVWXYZ\
                         abcdefghijklmnopqrstuvwxyz\
                         0123456789+/")

(defun base64-encode (x)
  (let ((res "")
        (acc 0)
        (bits 0))
    (dolist (c x)
      (when (string? c)
        (setf c (logand (char-code c) 255)))
      (setf acc (+ (ash acc 8) c))
      (incf bits 8)
      (do () ((< bits 6))
        (incf res (aref +ALPHABET+ (ash acc (- 6 bits))))
        (decf bits 6)
        (setf acc (logand acc (1- (ash 1 bits))))))
    (do () ((< bits 1))
      (incf res (aref +ALPHABET+ (ash acc (- 6 bits))))
      (decf bits 6)
      (setf acc (logand acc (1- (ash 1 bits)))))
    (when (% (length res) 4)
      (incf res (slice "===" 0 (- 4 (% (length res) 4)))))
    res))

(defun base64-decode (x)
  (let ((res "")
        (acc 0)
        (bits 0))
    (dolist (b x)
      (cond
        ((<= "A" b "Z")
         (setf acc (+ (ash acc 6) (- (char-code b) #.(char-code "A"))))
         (incf bits 6))
        ((<= "a" b "z")
         (setf acc (+ (ash acc 6) (- (char-code b) (- #.(char-code "a") 26))))
         (incf bits 6))
        ((<= "0" b "9")
         (setf acc (+ (ash acc 6) (- (char-code b) (- #.(char-code "0") 52))))
         (incf bits 6))
        ((= b "+")
         (setf acc (+ (ash acc 6) 62))
         (incf bits 6))
        ((= b "/")
         (setf acc (+ (ash acc 6) 63))
         (incf bits 6)))
      (do () ((< bits 8))
        (incf res (char (ash acc (- 8 bits))))
        (decf bits 8)
        (setf acc (logand acc (1- (ash 1 bits))))))
    res))

(export base64-encode base64-decode)