(import * from rpc)
(import * from rpc-test)
(import * from serialize)

(defun start-server (address port handler)
  (let* ((http (js-code "require('http')"))
         (server (http.createServer handler)))
    (server.listen port address)))

(defun process (url parms data response)
  (display ~"Processing url={url}, parms={parms}, data={data}")
  (when (and (= parms "") (not (null? data)))
    (setf parms data))
  (let ((content (if (= url "/process")
                     (to-buffer (process-request (from-buffer (uri-decode parms))))
                     (get-file (+ "." url) null)))
        (ctype (cond
                 ((find ".html" url)
                  "text/html")
                 ((find ".css" url)
                  "text/css")
                 ((find ".js" url)
                  "text/javascript")
                 ((find ".jpg" url)
                  "image/jpeg")
                 ((find ".png" url)
                  "image/png")
                 (true "text/plain"))))
    (funcall (. response writeHead)
             200 #((Content-Type ctype)))
    (funcall (. response end) content)))

(defun my-handler (request response)
  (let ((url (. request url))
        (parms null))
    (when (find "?" url)
      (let ((i (index "?" url)))
        (setf parms (slice url (1+ i)))
        (setf url (slice url 0 i))))
    (if (= request.method "POST")
        (let ((data ""))
          (request.on "data"
                      (lambda (chunk)
                        (incf data chunk)))
          (request.on "end"
                      (lambda ()
                        (process url parms data response))))
        (process url parms null response))))

(defun main ()
  (start-server "127.0.0.1" 1337
                #'my-handler))

(main)