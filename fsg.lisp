(defvar *screen* (create-element "div"))
(setf (. *screen* style position) "absolute")
(setf (. *screen* style left) "0px")
(setf (. *screen* style right) "0px")
(setf (. *screen* style top) "0px")
(setf (. *screen* style bottom) "0px")
(setf (. *screen* style overflow) "hidden")
(setf (. *screen* style pointerEvents) "none")
(append-child (. document body) *screen*)
(defvar *canvas* (create-element "canvas"))
(append-child *screen* *canvas*)
(setf (. *canvas* style pointerEvents) "none")
(defvar *dc* (funcall (. *canvas* getContext) "2d"))

(defun clear ()
  (setf (. *canvas* width) (. *screen* offsetWidth))
  (setf (. *canvas* height) (. *screen* offsetHeight)))

(defun fill-style (s) (setf (. *dc* fillStyle) s))
(defun stroke-style (s) (setf (. *dc* strokeStyle) s))
(defun line-width (s) (setf (. *dc* lineWidth) s))

(defmacro defgfx (lisp-name js-name &rest args)
  `(defun ,lisp-name ,args (funcall (. *dc* ,js-name) ,@args)))

(defgfx begin-path beginPath)
(defgfx close-path closePath)
(defgfx move-to moveTo x y)
(defgfx line-to lineTo x y)
(defgfx bez2-to quadraticCurveTo x1 y1 x2 y2)
(defgfx bez3-to bezierCurveTo x1 y1 x2 y2 x3 y3)
(defgfx arc-to arcTo x1 y1 x2 y2 radius)
(defgfx arc arc x y r a0 a1 ccw)
(defgfx fill fill)
(defgfx stroke stroke)
(defgfx clip clip)

(clear)