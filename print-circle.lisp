(defvar *print-circle* false)

(defvar *read-backpointers* #())

(defun set-mark-reader (src)
  (do ((name ""))
      ((find (current-char src) '("=" "#" undefined))
       (if (= (current-char src) "#")
           (progn
             (next-char src)
             (aref *read-backpointers* name))
           (progn
             (next-char src)
             (skip-spaces src)
             (if (= (current-char src) "(")
                 (let ((result (setf (aref *read-backpointers* name) (list))))
                   (next-char src)
                   (skip-spaces src)
                   (do ()
                       ((or (= (current-char src) ")")
                            (undefined? (current-char src)))
                        (next-char src)
                        result)
                     (push (parse-value src) result)
                     (skip-spaces src)))
                 (setf (aref *read-backpointers* name)
                       (parse-value src))))))
    (incf name (current-char src))
    (next-char src)))

(progn
  (setf (hash-reader "0") #'set-mark-reader)
  (setf (hash-reader "1") #'set-mark-reader)
  (setf (hash-reader "2") #'set-mark-reader)
  (setf (hash-reader "3") #'set-mark-reader)
  (setf (hash-reader "4") #'set-mark-reader)
  (setf (hash-reader "5") #'set-mark-reader)
  (setf (hash-reader "6") #'set-mark-reader)
  (setf (hash-reader "7") #'set-mark-reader)
  (setf (hash-reader "8") #'set-mark-reader)
  (setf (hash-reader "9") #'set-mark-reader))

(defun print (x)
  (let ((seen (list))
        (loops (list))
        (sent (list))
        (result ""))
    (labels ((visit (x)
               (when (list? x)
                 (if (find x seen)
                     (unless (find x loops)
                       (push x loops))
                     (progn
                       (push x seen)
                       (dolist (y x)
                         (visit y))))))
             (output (x) (incf result x))
             (dump (x)
               (if (list? x)
                   (let ((ix (1+ (index x loops))))
                     (if (> ix 0)
                         (if (find x sent)
                             (output ~"#{ix}#")
                             (progn
                               (output ~"#{ix}=(")
                               (push x sent)
                               (enumerate (j y x)
                                          (dump y)
                                          (when (< j (1- (length x)))
                                            (output " ")))
                               (output ")")))
                         (progn
                           (output "(")
                           (enumerate (j y x)
                                      (dump y)
                                      (when (< j (1- (length x)))
                                        (output " ")))
                           (output ")"))))
                   (output (json x)))))
      (when *print-circle* (visit x))
      (dump x)
      (display result))))