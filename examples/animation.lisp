(defconstant N 18)
(defconstant L 4)
(defconstant M 3)
(defconstant SZ 30)
(defconstant SZ1 26)

(defun animation ()
  (let** ((rects (repeat-collect (+ N (* M L))
                   (let ((d (create-element "div")))
                     (setf d.style.position "absolute")
                     (setf d.style.border "solid 1px #000")
                     (setf d.style.borderRadius "4px")
                     (setf d.style.width ~"{SZ1}px")
                     (setf d.style.height ~"{SZ1}px")
                     (setf d.style.boxShadow "2px 2px 2px rgba(0,0,0,0.5)")
                     (setf d.style.WebkitTransition "all 1s ease-in-out")
                     (append-child document.body d)
                     d)))
          (#'move (d x1 y1)
            (setf d.style.webkitTransform ~"translate3d({x1}px, {y1}px, 0)"))
          (x0 100)
          (y0 100)
          (input (map (lambda (d i)
                        (setf d.style.background-color "#FF0")
                        (move d (+ x0 (* i SZ)) y0)
                        d)
                      (slice rects 0 N)
                      (range N)))
          (slices (map (lambda (j)
                         (map (lambda (d i)
                                (setf d.style.background-color "#0FF")
                                (move d (+ x0 (* i SZ)) (+ y0 100 (* j SZ 2)))
                                d)
                              (slice rects (+ N (* j L)) (+ N (* (1+ j) L)))
                              (range L)))
                       (range M)))
          (input-removed (list))
          (slices-removed (list))
          (chosen (list))
          (avail (range (- N (* (1- L) M)))))
    (dotimes (i M)
      (set-timeout (lambda ()
                     (dolist (j (reverse (range (1- L))))
                       (let ((d (pop input)))
                         (move d (+ x0 (* j SZ) 50 (* SZ N)) (+ y0 (* i SZ 2.5)))
                         (push d input-removed))
                       (let ((d (pop (aref slices i))))
                         (move d (+ x0 (* j SZ) 50 (* SZ N)) (+ y0 SZ (* i SZ 2.5)))
                         (push d slices-removed))))
                   (+ 3000 (* i 1000))))
    (dotimes (i M)
      (set-timeout (lambda ()
                     (let ((d (pop (aref slices i)))
                           (x (random-choice avail)))
                       (move d (+ x0 (* x SZ)) (+ y0 SZ))
                       (push (list x d) chosen)
                       (nremove x avail)))
                   (+ 6000 (* M 1000) (* i 1000))))

    (set-timeout (lambda ()
                   (nsort chosen (lambda (a b) (< (first a) (first b))))
                   (let ((offset 0)
                         (t 0)
                         (k 0))
                     (dotimes (i (- N (* (1- L) M)))
                       (let ((i i)
                             (offset offset))
                         (set-timeout (lambda ()
                                        (let ((d (aref input i)))
                                          (move d (+ x0 (* (+ i offset) SZ)) (+ y0 (* SZ 4)))))
                                      t))
                       (when (and (> (length chosen) 0)
                                  (= i (first (first chosen))))
                         (incf k)
                         (let ((d (second (first chosen)))
                               (i i)
                               (k k)
                               (offset offset))
                           (set-timeout (lambda ()
                                          (move d (+ x0 (* (+ i offset) SZ)) (+ y0 (* SZ (+ k 5)))))
                                        (+ t 250))
                           (incf t 250)
                           (splice chosen 0 1))
                         (repeat (1- L)
                           (incf offset)
                           (let ((offset offset)
                                 (i i)
                                 (k k)
                                 (d1 (pop input-removed))
                                 (d2 (pop slices-removed)))
                             (set-timeout (lambda ()
                                            (move d1 (+ x0 (* (+ i offset) SZ)) (+ y0 (* SZ 4)))
                                            (move d2 (+ x0 (* (+ i offset) SZ)) (+ y0 (* SZ (+ k 5)))))
                                          (+ t 500))))
                         (incf t 500))
                       (incf t 1000))))
                 (+ 9000 (* M 2000)))
    ))

(defun main ()
  (animation))

(main)
