(import * from gui)
(import * from layout)

(defun trifill ()
  (let** ((w (window 0 0 0.75 0.75 title: "Triangle-filling path"))
          (canvas (add-widget w (create-element "canvas")))
          (steps (add-widget w (select "steps" (range 2 100))))
          (#'recalc ()
            (let** ((w canvas.offsetWidth)
                    (h canvas.offsetHeight)
                    (ctx (canvas.getContext "2d"))
                    (tx 10)
                    (ty 10)
                    (ta 0)
                    (ts (/ (- (min w (/ h (sqrt 3) 0.5)) 20) (1- (atoi (text steps)))))
                    (d (/ pi 3))
                    (#'W ()
                      (incf tx (* ts (cos ta)))
                      (incf ty (* ts (sin ta)))
                      (ctx.lineTo tx ty))
                    (#'L (s)
                      (incf ta (* s d)))
                    (#'R (s)
                      (decf ta (* s d)))
                    (#'tri (n s)
                      (cond
                        ((= n 1))
                        ((= n 2)
                         (L s) (W) (R s) (R s) (W) (L s))
                        ((odd? n)
                         (let ((h (ash n -1)))
                           (L s) (tri h (- s)) (W) (R s) (tri (- n h) s)
                           (R s) (R s) (W) (tri h (- s)) (L s) (L s) (W) (tri h s)))
                        ((> n 0)
                         (let ((h (ash n -1)))
                           (L s) (tri h (- s)) (W) (R s) (tri h s) (R s) (R s)
                           (W) (tri (1- h) (- s)) (L s) (W) (L s) (tri h s))))))
              (setf canvas.width w)
              (setf canvas.height h)
              (setf ctx.fillStyle "#000")
              (ctx.fillRect 0 0 w h)
              (setf ctx.strokeStyle "#0F0")
              (setf ctx.lineWidth 4)
              (setf ctx.lineCap "round")
              (setf ctx.lineJoin "round")
              (ctx.beginPath)
              (ctx.moveTo tx ty)
              (tri (atoi (text steps)) 1)
              (ctx.stroke))))
    (setf canvas.data-resize #'recalc)
    (set-handler steps onchange (recalc))
    (set-layout w (V spacing: 8 border: 8
                     (dom canvas)
                     size: 40
                     (H size: 80
                        (dom steps)
                        :filler:)))
    (focus steps)
    (show-window w center: true)))

(defun main ()
  (trifill))

(main)