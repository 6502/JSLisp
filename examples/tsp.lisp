(import * from gui)
(import * from layout)
(defobject xy (x y))

(defun tsp ()
  (let** ((w (window 0 0 0.75 0.75 title: "Travelling Salesman Problem"))
          (canvas (add-widget w (create-element "canvas")))
          (points (let ((res (list)))
                    (dolist (x (fp-range 0 0.99 20))
                      (dolist (y (fp-range 0 0.99 20))
                        (push (new-xy (+ (* (random) 0.01) x)
                                      (+ (* (random) 0.01) y))
                              res)))
                    (random-shuffle res)
                    res))
          (#'repaint ()
            (let* ((w canvas.offsetWidth)
                   (h canvas.offsetHeight)
                   (sz (- (min h w) 20))
                   (x0 (/ (- w sz) 2))
                   (y0 (/ (- h sz) 2))
                   (ctx (canvas.getContext "2d")))
              (setf canvas.width w)
              (setf canvas.height h)
              (setf ctx.fillStyle "#000")
              (ctx.fillRect 0 0 w h)
              (setf ctx.strokeStyle (if flipped "#F00" "#0F0"))
              (setf ctx.lineWidth 2)
              (ctx.beginPath)
              (let ((p (last points)))
                (ctx.moveTo (+ x0 (* sz p.x))
                            (+ y0 (* sz p.y))))
              (dolist (p points)
                (ctx.lineTo (+ x0 (* sz p.x))
                            (+ y0 (* sz p.y))))
              (ctx.stroke)
              (setf ctx.fillStyle "#FFF")
              (dolist (p points)
                (ctx.beginPath)
                (ctx.arc (+ x0 (* sz p.x))
                         (+ y0 (* sz p.y))
                         2 0 (* 2 pi) true)
                (ctx.fill))))
          (#'dist (a b)
            (let* ((dx (- a.x b.x))
                   (dy (- a.y b.y)))
              (sqrt (+ (* dx dx) (* dy dy)))))
          (flipped false)
          (#'tlen ()
            (let ((s 0)
                  (old (last points)))
              (dolist (p points)
                (incf s (dist p old))
                (setf old p))
              s))
          (temp 0.1)
          (#'think ()
            (setf flipped false)
            (setf temp (* temp 0.95))
            (repeat 100000
              (let* ((ia (random-int (length points)))
                     (ib (random-int (length points)))
                     (before-ia (if (= ia 0) (1- (length points)) (1- ia)))
                     (after-ib (if (= ib (1- (length points))) 0 (1+ ib))))
                (case (random-int 2)
                      (0 (when (and (/= ia ib after-ib before-ia)
                                    (<= (+ (dist (aref points before-ia) (aref points ib))
                                           (dist (aref points after-ib) (aref points ia)))
                                        (+ temp
                                           (dist (aref points before-ia) (aref points ia))
                                           (dist (aref points after-ib) (aref points ib)))))
                           (setf flipped true)
                           (repeat (ash (if (< ib ia) (+ 1 (length points) (- ib ia)) (- ib ia -1)) -1)
                             (swap (aref points ia) (aref points ib))
                             (when (>= (incf ia) (length points))
                               (setf ia 0))
                             (when (< (decf ib) 0)
                               (setf ib (1- (length points)))))))
                      (1 (let ((after-ia (if (= ia (1- (length points))) 0 (1+ ia)))
                               (before-ib (if (= ib 0) (1- (length points)) (1- ib))))
                           (when (and (/= ia ib before-ia after-ia before-ib after-ib)
                                      (<= (+ (dist (aref points before-ia) (aref points after-ia))
                                             (dist (aref points before-ib) (aref points ia))
                                             (dist (aref points ia) (aref points ib)))
                                          (+ temp
                                             (dist (aref points before-ia) (aref points ia))
                                             (dist (aref points after-ia) (aref points ia))
                                             (dist (aref points before-ib) (aref points ib)))))
                             (setf flipped true)
                             (let ((a (first (splice points ia 1))))
                               (insert points (if (< ia ib) (1- ib) ib) a))))))))
            (when flipped
              (set-timeout #'think 0))
            (repaint)))
    (set-layout w (V border: 8 spacing: 8
                     (dom canvas)))
    (setf canvas.data-resize #'repaint)
    (set-handler canvas onmousedown
      (set-timeout #'think 0))
    (show-window w center: true)))

(defun main ()
  (tsp))

(main)
