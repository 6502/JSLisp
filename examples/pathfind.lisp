(import * from gui)
(import * from layout)

(defun main ()
  (let** ((w (window 0 0 658 507 title: "Path finding"))
          (canvas (add-widget w (set-style (create-element "canvas") position "absolute")))
          (block (add-widget w (button "Block" (lambda () (setf mode 'block) (repaint)))))
          (test (add-widget w (button "Test" (lambda () (setf mode 'test) (setf pts (list)) (repaint)))))
          (mode-label (add-widget w (static-text "")))
          (ctx (canvas.getContext "2d"))
          (mode 'block)
          (blocks (list))
          (pts (list))
          (sf 8)
          (limit 36)
          (#'safe (xa ya xb yb)
            (let** ((x0 (min xa xb))
                    (y0 (min ya yb))
                    (x1 (max xa xb))
                    (y1 (max ya yb))
                    (nx (- yb ya))
                    (ny (- xa xb))
                    (nk (- (+ (* xa nx) (* ya ny)))))
              (dolist ((x y w h) blocks)
                (when (and (< x x1) (> (+ x w) x0) (< y y1) (> (+ y h) y0))
                  (let ((pos 0) (neg 0))
                    (if (< (+ (* x nx) (* y ny) nk) 0) (incf neg) (incf pos))
                    (if (< (+ (* (+ x w) nx) (* y ny) nk) 0) (incf neg) (incf pos))
                    (if (< (+ (* x nx) (* (+ y h) ny) nk) 0) (incf neg) (incf pos))
                    (if (< (+ (* (+ x w) nx) (* (+ y h) ny) nk) 0) (incf neg) (incf pos))
                    (when (and (> pos 0) (> neg 0))
                      (return-from safe false)))))
              true))
          (#'pathfind (x0 y0 x1 y1)
            (do ((known #(()))
                 (active (list (list null x0 y0 0 0)))
                 (min-x (- (min x0 x1) 20))
                 (max-x (+ (max x0 x1) 20))
                 (min-y (- (min y0 y1) 20))
                 (max-y (+ (max y0 y1) 20)))
              ((= (length active) 0) null)
              (let ((next-active (list)))
                (dolist (a active)
                  (let (((parent x y dx dy) a))
                    (declare (ignorable parent))
                    (dolist (ix '(-1 0 1))
                      (dolist (iy '(-1 0 1))
                        (let ((nx (+ x dx))
                              (ny (+ y dy))
                              (ndx (+ dx ix))
                              (ndy (+ dy iy)))
                          (when (and (<= (+ (* ndx ndx) (* ndy ndy)) limit)
                                     (<= min-x nx max-x)
                                     (<= min-y ny max-y)
                                     (safe (* sf x) (* sf y) (* sf nx) (* sf ny)))
                            (let ((key (+ nx "/" ny "/" ndx "/" ndy)))
                              (unless (aref known key)
                                (push (list a nx ny ndx ndy) next-active)
                                (setf (aref known key) a)
                                (when (and (= nx x1) (= ny y1) (= ndx 0) (= ndy 0))
                                  (do ((result (list #((x nx)(y ny)))))
                                    ((not a) (return-from pathfind result))
                                    (push #((x (second a)) (y (third a))) result)
                                    (setf a (first a))))))))))))
                (setf active next-active))))
          (#'repaint ()
            (setf canvas.width canvas.offsetWidth)
            (setf canvas.height canvas.offsetHeight)
            (setf ctx.fillStyle "#888")
            (ctx.fillRect 0 0 canvas.width canvas.height)
            (setf ctx.fillStyle "#FFF")
            (dotimes (i (floor (/ canvas.height sf)))
              (dotimes (j (floor (/ canvas.width sf)))
                (ctx.fillRect (- (* sf j) 0.5) (- (* sf i) 0.5) 1 1)))
            (setf ctx.fillStyle "#CCC")
            (dolist ((x y w h) blocks)
              (ctx.fillRect x y w h))
            (when (length pts)
              (ctx.beginPath)
              (setf ctx.strokeStyle "#FFF")
              (setf ctx.lineWidth 2)
              (ctx.moveTo (* sf (first pts).x) (* sf (first pts).y))
              (dolist (p (rest pts))
                (ctx.lineTo (* sf p.x) (* sf p.y)))
              (ctx.stroke)
              (setf ctx.fillStyle "#000")
              (dolist (p pts)
                (ctx.beginPath)
                (ctx.arc (* sf p.x) (* sf p.y) 2 0 (* 2 pi) true)
                (ctx.fill)))
            (setf (text mode-label) (if (= mode 'block) "block" "test")))
          (#'down (x y)
            (cond
              ((= mode 'block)
               (push (list x y 100 100) blocks))
              ((= mode 'test)
               (push #((x (round (/ x sf)))
                       (y (round (/ y sf)))) pts)
               (when (= (length pts) 2)
                 (let ((res (pathfind (first pts).x (first pts).y
                                      (second pts).x (second pts).y)))
                   (if res
                       (setf pts res)
                       (setf pts (list)))))))
            (repaint)))
    (setf canvas.onmousedown
          (lambda (event)
            (event.preventDefault)
            (event.stopPropagation)
            (down (- event.clientX (canvas.getBoundingClientRect).left)
                  (- event.clientY (canvas.getBoundingClientRect).top))))
    (set-style mode-label
               backgroundColor "#CDC"
               px/padding 0
               px/margin 0
               px/paddingTop 7
               fontSize "120%"
               fontWeight "bold"
               textAlign "center"
               color "#444"
               boxShadow "inset 2px 2px 2px 2px rgba(0,0,0,0.25)")
    (set-layout w (V border: 8 spacing: 8
                     weight: 469
                     (dom canvas)
                     size: 30
                     (H spacing: 8
                        :filler:
                        size: 80
                        (dom block)
                        :filler:
                        (dom test)
                        :filler:
                        (dom mode-label)
                        :filler:)))
    (set-interval (lambda ()
                    (when (or (/= canvas.width canvas.offsetWidth)
                              (/= canvas.height canvas.offsetHeight))
                      (repaint)))
                  10)
    (show-window w center: true)))

(main)