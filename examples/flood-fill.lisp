(import * from gui)
(import * from graphics)
(import * form layout)

(defconstant PIXEL-SCALE 16)
(defconstant WORLD-SIZE 32)
(defconstant WALL 0)
(defconstant FREE 1)
(defconstant PAINT 2)
(defconstant SEED 3)

(defun frontier-filler (world x y)
  (let ((current-active (list (list x y)))
        (next-active (list))
        (phase :run:)
        (i 0))
    (setf (aref world y x) PAINT)
    (labels ((to-paint (x y)
               (and (< -1 x WORLD-SIZE)
                    (< -1 y WORLD-SIZE)
                    (not (find (aref world y x) (list WALL SEED PAINT))))))
      (lambda ()
        (ecase phase
          (:stop:)
          (:run:
             (let (((x y) (aref current-active i)))
               (setf (aref world y x) PAINT)
               (dolist ((xx yy) (list (list (1- x) y)
                                      (list (1+ x) y)
                                      (list x (1- y))
                                      (list x (1+ y))))
                 (when (to-paint xx yy)
                   (setf (aref world yy xx) SEED)
                   (push (list xx yy) next-active))))
             (incf i)
             (when (>= i (length current-active))
               (setf current-active next-active)
               (setf next-active (list))
               (setf i 0)
               (when (= 0 (length current-active))
                 (setf phase :stop:)))))
        (/= phase :stop:)))))

(defun scanline-filler (world x y)
  (let ((todo (list (list x y)))
        (phase :start:)
        (look-above false)
        (look-below false))
    (labels ((to-paint (x y)
               (and (< -1 x WORLD-SIZE)
                    (< -1 y WORLD-SIZE)
                    (not (find (aref world y x) (list WALL PAINT))))))
      (lambda ()
        (ecase phase
          (:stop:)
          (:start:
             (if (= (length todo) 0)
                 (setf phase :stop:)
                 (let (((xx yy) (pop todo)))
                   (when (to-paint xx yy)
                     (setf x xx)
                     (setf y yy)
                     (setf phase :left:)))))
          (:left:
             (if (to-paint (1- x) y)
                 (decf x)
                 (progn
                   (setf phase :right:)
                   (setf look-above true)
                   (setf look-below true))))
          (:right:
             (when (> y 0)
               (let ((above-free (to-paint x (1- y))))
                 (cond
                   ((and look-above above-free)
                    (push (list x (1- y)) todo)
                    (setf (aref world (1- y) x) SEED)
                    (setf look-above false))
                   ((and (not look-above) (not above-free))
                    (setf look-above true)))))
             (when (< y (1- WORLD-SIZE))
               (let ((below-free (to-paint x (1+ y))))
                 (cond
                   ((and look-below below-free)
                    (push (list x (1+ y)) todo)
                    (setf look-below false))
                   ((and (not look-below) (not below-free))
                    (setf look-below true)))))
             (setf (aref world y x) PAINT)
             (incf x)
             (unless (to-paint x y)
               (setf phase :start:))))
        (/= phase :stop:)))))

(defun fill-window ()
  (let** ((w (window 0 0
                     (+ (* WORLD-SIZE PIXEL-SCALE) 16)
                     (+ (* WORLD-SIZE PIXEL-SCALE) 16 40)
                     resize: false
                     title: "Flood fill"))
          (canvas (add-widget w (set-style (create-element "canvas")
                                           position "absolute"
                                           px/width (* WORLD-SIZE PIXEL-SCALE)
                                           px/height (* WORLD-SIZE PIXEL-SCALE))))
          (world (make-array (list WORLD-SIZE WORLD-SIZE) FREE))
          (clear (add-widget w (button "clear" #'clear)))
          (random (add-widget w (button "random" #'random)))
          (draw (add-widget w (button "draw" #'draw)))
          (ffill (add-widget w (button "f-fill" #'ffill)))
          (sfill (add-widget w (button "s-fill" #'sfill)))
          (mode :draw:)
          (#'repaint ()
                     (setf canvas.width (* WORLD-SIZE PIXEL-SCALE))
                     (setf canvas.height (* WORLD-SIZE PIXEL-SCALE))
                     (with-canvas canvas
                       (dotimes (y WORLD-SIZE)
                         (dotimes (x WORLD-SIZE)
                           (fill-style (ecase (aref world y x)
                                         (FREE  "#FFFFFF")
                                         (WALL  "#888888")
                                         (PAINT "#FF0000")
                                         (SEED  "#00FF00")))
                           (fill-rect (* x PIXEL-SCALE) (* y PIXEL-SCALE)
                                      PIXEL-SCALE PIXEL-SCALE)))))
          (#'clear ()
                   (dotimes (y WORLD-SIZE)
                     (dotimes (x WORLD-SIZE)
                       (setf (aref world y x) FREE)))
                   (repaint))
          (#'random ()
                    (dotimes (y WORLD-SIZE)
                      (dotimes (x WORLD-SIZE)
                        (setf (aref world y x) (if (random-int 4) FREE WALL))))
                    (repaint))
          (#'cleanup ()
                     (dotimes (y WORLD-SIZE)
                       (dotimes (x WORLD-SIZE)
                         (unless (= (aref world y x) WALL)
                           (setf (aref world y x) FREE))))
                     (repaint))
          (#'draw ()
                  (cleanup)
                  (setf mode :draw:))
          (#'sfill ()
                   (cleanup)
                   (setf mode :sfill:))
          (#'ffill ()
                   (cleanup)
                   (setf mode :ffill:)))
    (set-handler canvas onmousedown
                 (event.stopPropagation)
                 (event.preventDefault)
                 (macrolet ((px (y x)
                              `(aref world
                                     (floor (/ ,y PIXEL-SCALE))
                                     (floor (/ ,x PIXEL-SCALE)))))
                   (let (((x y) (relative-pos event canvas)))
                     (if (= mode :draw:)
                         (let ((color (if (= WALL (px y x)) FREE WALL)))
                           (setf (px y x) color)
                           (repaint)
                           (tracking (lambda (x y)
                                       (let (((cx cy) (element-pos canvas)))
                                         (decf x cx)
                                         (decf y cy)
                                         (setf (px y x) color))
                                       (repaint))))
                         (when (= (px y x) FREE)
                           (let** ((f (funcall (if (= mode :ffill:)
                                                   #'frontier-filler
                                                   #'scanline-filler)
                                               world
                                               (floor (/ x PIXEL-SCALE))
                                               (floor (/ y PIXEL-SCALE))))
                                   (id (set-interval (lambda ()
                                                       (unless (funcall f)
                                                         (clear-interval id))
                                                       (repaint))
                                                     10)))))))))
    (set-layout w (V spacing: 8 border: 8
                     (dom canvas)
                     size: 30
                     (H :filler:
                        size: 80
                        (dom clear)
                        (dom random)
                        (dom draw)
                        (dom sfill)
                        (dom ffill)
                        :filler:)))
    (show-window w center: true)))

(defun main ()
  (fill-window))

(main)