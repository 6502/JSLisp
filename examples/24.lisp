(import * from gui)
(import * from layout)

(defconstant R 30)
(defconstant R2 80)
(defconstant R3 200)

(defobject digit (x y n))
(defobject operator (x y op f a b))

(defmethod draw (ctx e) (digit? e)
  (ctx.beginPath)
  (ctx.moveTo (- e.x R) (- e.y R))
  (ctx.lineTo (+ e.x R) (- e.y R))
  (ctx.lineTo (+ e.x R) (+ e.y R))
  (ctx.lineTo (- e.x R) (+ e.y R))
  (ctx.closePath)
  (setf ctx.fillStyle "#EEE")
  (setf ctx.strokeStyle "#000")
  (setf ctx.lineWidth 2)
  (ctx.fill)
  (ctx.stroke)
  (setf ctx.fillStyle "#008")
  (setf ctx.font ~"bold {(* R 0.9)}px monospace")
  (setf ctx.textAlign "center")
  (ctx.fillText e.n e.x (+ e.y (* R 0.4))))

(defun xlate (e dx dy)
  (incf e.x dx)
  (incf e.y dy))

(defmethod hit (e x y) (digit? e)
  (when (and (< (abs (- e.x x)) R)
             (< (abs (- e.y y)) R))
    (lambda (xx yy)
      (xlate e (- xx x) (- yy y))
      (setf x xx)
      (setf y yy))))

(defmethod draw (ctx e) (operator? e)
  (ctx.beginPath)
  (ctx.arc e.x e.y R 0 (* 2 pi) true)
  (ctx.closePath)
  (setf ctx.fillStyle "#FFC")
  (setf ctx.strokeStyle "#000")
  (setf ctx.lineWidth 2)
  (ctx.fill)
  (ctx.stroke)
  (setf ctx.fillStyle "#800")
  (setf ctx.font ~"bold {(* R 0.9)}px monospace")
  (setf ctx.textAlign "center")
  (ctx.fillText e.op e.x (+ e.y (* R 0.4))))

(defun draw-links (ctx e)
  (declare (ignorable ctx e)))

(defmethod draw-links (ctx e) (operator? e)
  (setf ctx.style "#00F")
  (setf ctx.lineWidth 4)
  (ctx.beginPath)
  (when e.a
    (ctx.moveTo e.x e.y)
    (ctx.lineTo e.a.x e.a.y))
  (when e.b
    (ctx.moveTo e.x e.y)
    (ctx.lineTo e.b.x e.b.y))
  (ctx.stroke))

(defun dist (a b)
  (sqrt (+ (expt (- a.x b.x) 2)
           (expt (- a.y b.y) 2))))

(defun above (ee side max-dist valid-entities)
  (let ((best null))
    (dolist (e valid-entities)
      (when (and (> (* side (- e.x ee.x)) 0)
                 (< e.y (- ee.y R)))
        (let ((dist (dist e ee)))
          (when (and (< dist max-dist)
                     (or (null? best)
                         (< dist (first best))))
            (setf best (list dist e))))))
    (and best (second best))))

(defun autoconnect (entities)
  (let ((valid-entities (filter #'digit? entities))
        (todo (filter #'operator? entities)))
    (dolist (ee todo)
      (setf ee.a undefined)
      (setf ee.b undefined))
    (do () ((not todo) valid-entities)
      (let ((best null))
        (dolist (ee todo)
          (let ((a (above ee -1 R3 valid-entities)))
            (when a
              (let ((b (above ee 1 R3 valid-entities)))
                (when b
                  (let ((score (+ (dist a ee) (dist b ee))))
                    (when (or (null? best)
                              (< score (first best)))
                      (setf best (list score ee a b)))))))))
        (if best
            (let (((score ee a b) best))
              (declare (ignorable score))
              (setf ee.a a)
              (setf ee.b b)
              (nremove ee todo)
              (nremove a valid-entities)
              (nremove b valid-entities)
              (push ee valid-entities))
            (return-from autoconnect valid-entities))))))

(defmethod hit (e x y) (operator? e)
  (when (and (< (abs (- e.x x)) R)
             (< (abs (- e.y y)) R))
    (lambda (xx yy)
      (xlate e (- xx x) (- yy y))
      (setf x xx)
      (setf y yy))))

(defmethod value-of (e) (digit? e)
  (atoi e.n))

(defmethod value-of (e) (operator? e)
  (funcall e.f (value-of e.a) (value-of e.b)))

(defun game ()
  (let** ((w (window 0 0 0.75 0.75 title: "24"))
          (canvas (add-widget w (create-element "canvas")))
          (ctx (canvas.getContext "2d"))
          (entities (list))
          (#'repaint ()
            (let ((w canvas.offsetWidth)
                  (h canvas.offsetHeight)
                  (result (autoconnect entities)))
              (setf canvas.width w)
              (setf canvas.height h)
              (dolist (e entities)
                (draw-links ctx e))
              (dolist (e (reverse entities))
                (draw ctx e))
              (when (= (length result) 1)
                (let** ((x0 w)
                        (y0 h)
                        (x1 0)
                        (y1 0)
                        (#'visit (e)
                          (when (< e.x x0) (setf x0 e.x))
                          (when (> e.x x1) (setf x1 e.x))
                          (when (< e.y y0) (setf y0 e.y))
                          (when (> e.y y1) (setf y1 e.y))
                          (when e.a (visit e.a))
                          (when e.b (visit e.b))))
                  (visit (first result))
                  (setf ctx.strokeStyle
                        (if (< (abs (- (value-of (first result)) 24))
                               0.00001)
                            "#0F0"
                            "#F00"))
                  (setf ctx.lineWidth 6)
                  (ctx.beginPath)
                  (ctx.moveTo (- x0 R2) (- y0 R2))
                  (ctx.lineTo (+ x1 R2) (- y0 R2))
                  (ctx.lineTo (+ x1 R2) (+ y1 R2))
                  (ctx.lineTo (- x0 R2) (+ y1 R2))
                  (ctx.closePath)
                  (ctx.stroke)))))
          (#'down (x y)
            (let* (((x0 y0) (element-pos canvas))
                   (cb (any (e entities) (hit e (- x x0) (- y y0)))))
              (when cb
                (tracking
                  (lambda (x y)
                    (funcall cb (- x x0) (- y y0))
                    (repaint)))))))
    (dolist (y (list R2 (* R2 2) (* R2 3)))
      (push (new-operator R2 y "+" #'+) entities)
      (push (new-operator (* R2 2) y "-" #'-) entities)
      (push (new-operator (* R2 3) y "*" #'*) entities)
      (push (new-operator (* R2 4) y "/" #'/) entities))
    (dolist ((x n) (zip (list R2 (* R2 2) (* R2 3) (* R2 4))
                        (repeat-collect 4 (random-choice (range 1 10)))))
      (push (new-digit x (* R2 4) n) entities))

    (set-layout w (V border: 8 spacing: 8
                     (dom canvas)))
    (setf canvas.data-resize #'repaint)
    (set-handler canvas onmousedown
      (event.preventDefault)
      (event.stopPropagation)
      (apply #'down (event-pos event)))
    (show-window w center: true)))

(defun main ()
  (game))

(main)
