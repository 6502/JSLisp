(import * from gui)
(import * from layout)
(import * from graphics)

(defvar *image-data* (let ((res #()))
                       (dolist (x '("wp" "wr" "wn" "wb" "wq" "wk"
                                    "bp" "br" "bn" "bb" "bq" "bk"
                                    "xx"))
                         (setf (aref res x)
                               (image-data-url ~"examples/img/{x}.png")))
                       res))

(defun chessboard (cback &optional fen)
  (let** ((w (window 0 0 590 540 title: "Chessboard"))
          (canvas (add-widget w (create-element "canvas")))
          (pselect (add-widget w (create-element "canvas")))
          (ok (add-widget w (button "OK" #'ok)))
          (clear (add-widget w (button "Clear" #'clear)))
          (start (add-widget w (button "Start" #'start)))
          (wk (add-widget w (checkbox "w O-O")))
          (wq (add-widget w (checkbox "w O-O-O")))
          (bk (add-widget w (checkbox "b O-O")))
          (bq (add-widget w (checkbox "b O-O-O")))
          (epcol (add-widget w (select null (append (list "-")
                                                    (map (lambda (c) ~"e.p. {c}")
                                                         "abcdefgh")))))
          (color (add-widget w (select null (list "White" "Black"))))
          (pos (make-array (list 8 8)))
          (load-count 0)
          (pieces (let ((pieces #()))
                    (dolist (x '("wp" "wr" "wn" "wb" "wq" "wk"
                                 "bp" "br" "bn" "bb" "bq" "bk"
                                 "xx"))
                      (setf (aref pieces x)
                            (let ((img (create-element "img")))
                              (set-handler img onload
                                (when (= (incf load-count) 13)
                                  (redraw)
                                  (redraw-pselect)))
                              (setf img.src (aref *image-data* x))
                              img)))
                    pieces))
          (lightsq "#EEDDCC")
          (darksq "#BBAA99")
          (border "#887766")
          (background "#EEEEEE")
          (last-x 0)
          (last-y 0)
          (#'start ()
            (parse-fen null))
          (#'ok ()
            (funcall cback (fen))
            (hide-window w))
          (#'keypress (event)
            (let ((stop true)
                  (col (if (= (text color) "White") 0 1)))
              (cond
                ((find (char event.which) "prnbqkex")
                 (setf (aref pos last-y last-x)
                       (cond
                         ((= event.which #.(char-code "e"))
                          undefined)
                         ((= event.which #.(char-code "x"))
                          (aref pieces "xx"))
                         (true
                           (aref pieces (+ (aref "wb" col) (char event.which)))))))
                ((= event.which #.(char-code "z"))
                 (clear))
                ((= event.which #.(char-code " "))
                 (setf (text color) (if col "White" "Black")))
                ((= event.which 27)
                 (hide-window w))
                ((= event.which 13)
                 (funcall cback (fen))
                 (hide-window w))
                (true (setf stop false)))
              (if stop
                  (progn
                    (redraw)
                    (event.stopPropagation)
                    (event.preventDefault)
                    false)
                  true)))
          (#'mousemove (event)
            (event.stopPropagation)
            (event.preventDefault)
            (let (((cx cy) (element-pos canvas))
                  ((x y) (event-pos event)))
              (if (and (<= cx x (+ cx canvas.offsetWidth))
                       (<= cy y (+ cy canvas.offsetHeight)))
                  (let* ((sq (min (floor (/ canvas.offsetWidth 9))
                                  (floor (/ canvas.offsetHeight 9))))
                         (x0 (floor (/ (- canvas.offsetWidth (* sq 8)) 2)))
                         (y0 (floor (/ (- canvas.offsetHeight (* sq 8)) 2)))
                         (iy (floor (/ (- y cy y0) sq)))
                         (ix (floor (/ (- x cx x0) sq))))
                    (when (and (<= 0 ix 7) (<= 0 iy 7))
                      (setf last-x ix)
                      (setf last-y iy))))))
          (#'clear ()
            (parse-fen "8/8/8/8/8/8/8/8 w - - 1 0"))
          (#'drag (x y pz)
            (let* ((img (create-element "canvas"))
                   (sq (min (floor (/ canvas.offsetWidth 9))
                            (floor (/ canvas.offsetHeight 9))))
                   (x0 (floor (/ (- canvas.offsetWidth (* sq 8)) 2)))
                   (y0 (floor (/ (- canvas.offsetHeight (* sq 8)) 2)))
                   (m (floor (/ sq 12))))
              (setf img.width sq)
              (setf img.height sq)
              (let ((ctx (img.getContext "2d")))
                (ctx.drawImage pz (- m) (- m) (+ sq m m) (+ sq m m)))
              (set-style img
                         position "absolute"
                         px/left (- x (/ sq 2))
                         px/top (- y (/ sq 2))
                         px/width sq
                         px/height sq)
              (append-child document.body img)
              (tracking (lambda (x y)
                          (set-style img
                                     px/left (- x (/ sq 2))
                                     px/top (- y (/ sq 2))))
                        (lambda (x y)
                          (let* (((cx cy) (element-pos canvas))
                                 (ix (floor (/ (- x cx x0) sq)))
                                 (iy (floor (/ (- y cy y0) sq))))
                            (when (and (<= 0 ix 7) (<= 0 iy 7))
                              (setf (aref pos iy ix) pz)
                              (dolist (k (keys pieces))
                                (when (= (aref pieces k) pz)
                                  (setf (text color) (if (= (first k) "b") "White" "Black"))))
                              (fixflags ix iy)
                              (redraw))
                            (remove-child document.body img)))
                        "move")))
          (#'mousedown (event)
            (let (((psx psy) (element-pos pselect))
                  ((cx cy) (element-pos canvas))
                  ((x y) (event-pos event)))
              (cond
                ((and (<= psx x (+ psx pselect.offsetWidth))
                      (<= psy y (+ psy pselect.offsetHeight)))
                 (event.stopPropagation)
                 (event.preventDefault)
                 (let ((iy (floor (* (- y psy) 6 (/ pselect.offsetHeight))))
                       (ix (floor (* (- x psx) 2 (/ pselect.offsetWidth)))))
                   (drag x y (aref pieces (+ (aref "wb" (max (min ix 1) 0))
                                             (aref "prnbqk" (max (min iy 5) 0)))))))
                ((and (<= cx x (+ cx canvas.offsetWidth))
                      (<= cy y (+ cy canvas.offsetHeight)))
                 (let* ((sq (min (floor (/ canvas.offsetWidth 9))
                                 (floor (/ canvas.offsetHeight 9))))
                        (x0 (floor (/ (- canvas.offsetWidth (* sq 8)) 2)))
                        (y0 (floor (/ (- canvas.offsetHeight (* sq 8)) 2)))
                        (iy (floor (/ (- y cy y0) sq)))
                        (ix (floor (/ (- x cx x0) sq))))
                   (when (and (<= 0 ix 7) (<= 0 iy 7) (aref pos iy ix))
                     (fixflags ix iy)
                     (event.stopPropagation)
                     (event.preventDefault)
                     (let ((p (aref pos iy ix)))
                       (setf (aref pos iy ix) undefined)
                       (redraw)
                       (drag x y p))))))))
          (#'fixflags (ix iy)
            (cond
              ((and (= ix 0) (= iy 7))
               (setf (checked wq) false))
              ((and (= ix 7) (= iy 7))
               (setf (checked wk) false))
              ((and (= ix 0) (= iy 0))
               (setf (checked bq) false))
              ((and (= ix 7) (= iy 0))
               (setf (checked bk) false))
              ((and (= ix 4) (= iy 7))
               (setf (checked wq) false)
               (setf (checked wk) false))
              ((and (= ix 4) (= iy 0))
               (setf (checked bq) false)
               (setf (checked bk) false))))
          (#'redraw-pselect ()
            (setf pselect.width pselect.offsetWidth)
            (setf pselect.height pselect.offsetHeight)
            (let* ((sq (min (floor (/ pselect.offsetWidth 2))
                            (floor (/ pselect.offsetHeight 6))))
                   (x0 (floor (/ (- pselect.offsetWidth (* sq 2)) 2)))
                   (y0 (floor (/ (- pselect.offsetHeight (* sq 6)) 2)))
                   (m (floor (/ sq 12)))
                   (ctx (pselect.getContext "2d")))
              (setf ctx.imageSmoothingEnabled true)
              (dotimes (y 6)
                (dotimes (x 2)
                  (setf ctx.fillStyle "#DDDDDD")
                  (ctx.fillRect (+ x0 (* x sq) 2) (+ y0 (* y sq) 2)
                                (- sq 4) (- sq 4))
                  (let ((img (aref pieces (+ (aref "wb" x) (aref "prnbqk" y)))))
                    (ctx.drawImage img
                                   (- (+ x0 (* sq x)) m)
                                   (- (+ y0 (* sq y)) m)
                                   (+ sq m m)
                                   (+ sq m m)))))))
          (#'fen ()
            (let ((res ""))
              (dotimes (y 8)
                (dotimes (x 8)
                  (let ((p (aref pos y x)))
                    (incf res (cond
                                ((= p (aref pieces "wp")) "P")
                                ((= p (aref pieces "wr")) "R")
                                ((= p (aref pieces "wn")) "N")
                                ((= p (aref pieces "wb")) "B")
                                ((= p (aref pieces "wq")) "Q")
                                ((= p (aref pieces "wk")) "K")
                                ((= p (aref pieces "bp")) "p")
                                ((= p (aref pieces "br")) "r")
                                ((= p (aref pieces "bn")) "n")
                                ((= p (aref pieces "bb")) "b")
                                ((= p (aref pieces "bq")) "q")
                                ((= p (aref pieces "bk")) "k")
                                ((= p (aref pieces "xx")) "x")
                                (true "1")))))
                (incf res "/"))
              (+ (replace (slice res 0 -1) "1+" #'length) " "
                 (if (= (text color) "White") "w" "b")
                 " "
                 (or (+ (if (checked wk) "K" "")
                        (if (checked wq) "Q" "")
                        (if (checked bk) "k" "")
                        (if (checked bq) "q" ""))
                     "-")
                 " "
                 (if (= (text epcol) "-")
                     "-"
                     (+ (last (text epcol))
                        (if (= (text color) "White") "6" "3")))
                 " 1 0")))
          (#'redraw ()
            (setf canvas.width canvas.offsetWidth)
            (setf canvas.height canvas.offsetHeight)
            (let* ((sq (min (floor (/ canvas.offsetWidth 9))
                            (floor (/ canvas.offsetHeight 9))))
                   (x0 (floor (/ (- canvas.offsetWidth (* sq 8)) 2)))
                   (y0 (floor (/ (- canvas.offsetHeight (* sq 8)) 2)))
                   (m (floor (/ sq 12)))
                   (ctx (canvas.getContext "2d")))
              (setf ctx.fillStyle background)
              (ctx.fillRect 0 0 canvas.width canvas.height)
              (setf ctx.fillStyle border)
              (ctx.fillRect (- x0 m) (- y0 m)
                            (+ (* 8 sq) m m) (+ (* 8 sq) m m))
              (dotimes (y 8)
                (dotimes (x 8)
                  (setf ctx.fillStyle (if (odd? (+ x y)) darksq lightsq))
                  (ctx.fillRect (+ x0 (* sq x)) (+ y0 (* sq y)) sq sq)
                  (when (aref pos y x)
                    (ctx.drawImage (aref pos y x)
                                   (- (+ x0 (* sq x)) m)
                                   (- (+ y0 (* sq y)) m)
                                   (+ sq m m)
                                   (+ sq m m)))))))
          (#'parse-fen (fen)
            (unless fen
              (setf fen "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 1 0"))
            (setf pos (make-array (list 8 8)))
            (let ((y 0)
                  (x 0)
                  (i 0))
              (do () ((or (= y 8) (>= i (length fen))))
                (let ((c (aref fen (1- (incf i)))))
                  (cond
                    ((find c "prnbqk")
                     (setf (aref pos y x) (aref pieces (+ "b" c)))
                     (incf x))
                    ((find c "PRNBQK")
                     (setf (aref pos y x) (aref pieces (+ "w" (lowercase c))))
                     (incf x))
                    ((= c ":")
                     (incf x))
                    ((find c "12345678")
                     (incf x (atoi c))))
                  (when (>= x 8)
                    (setf x 0)
                    (incf y))))
              (do () ((/= (aref fen i) " ")) (incf i))
              (setf (text color)
                    (if (= (aref fen (1- (incf i))) "b") "Black" "White"))
              (do () ((/= (aref fen i) " ")) (incf i))
              (setf (checked wk) false)
              (setf (checked wq) false)
              (setf (checked bk) false)
              (setf (checked bq) false)
              (do () ((or (>= i (length fen)) (= (aref fen i) " ")))
                (case (aref fen i)
                      ("K" (setf (checked wk) true))
                      ("Q" (setf (checked wq) true))
                      ("k" (setf (checked bk) true))
                      ("q" (setf (checked bq) true)))
                (incf i))
              (do () ((/= (aref fen i) " ")) (incf i))
              (setf (text epcol) "-")
              (when (<= "a" (aref fen i) "h")
                (setf (text epcol) ~"e.p. {(aref fen i)}")))
            (redraw)))
    (w.client.addEventListener "mousedown" #'mousedown)
    (w.client.addEventListener "mousemove" #'mousemove)
    (w.client.addEventListener "keypress" #'keypress)
    (setf w.client.tabIndex 0)
    (setf w.client.style.outline "none")
    (focus w.client)
    (setf canvas.data-resize #'redraw)
    (setf pselect.data-resize #'redraw-pselect)
    (set-layout w (V border: 8 spacing: 8
                     (H border: 8 spacing: 8
                        size: 100
                        (V (V spacing: 2
                              (dom color)
                              (dom epcol)
                              size: 16
                              (dom wk)
                              (dom wq)
                              (dom bk)
                              (dom bq))
                           size: 300
                           (dom pselect))
                        size: undefined
                        (dom canvas))
                     size: 30
                     (H size: 80
                        :filler:
                        (dom clear)
                        (dom start)
                        :filler:
                        (dom ok)
                        :filler:)))
    (parse-fen fen)
    (show-window w center: true modal: true)))

(export chessboard)
