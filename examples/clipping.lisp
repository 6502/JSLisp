(import * from gui)
(import * from layout)

(defun spans (boundary y)
  (do ((ixs (list))
       (j (1- (length boundary)) i)
       (i 0 (1+ i)))
    ((= i (length boundary)) (sort ixs))
    (let (((x0 y0) (aref boundary j))
          ((x1 y1) (aref boundary i)))
      (when (or (and (<= y0 y) (< y y1))
                (and (<= y1 y) (< y y0)))
        (push (+ x0 (/ (* (- y y0) (- x1 x0)) (- y1 y0)))
              ixs)))))

(defun hatch (ctx boundary angle step)
  (let** ((cos (cos angle))
          (sin (sin angle))
          (mpts (map (lambda (p)
                       (let (((x y) p))
                         (list (+ (* cos x) (* sin y))
                               (- (* cos y) (* sin x)))))
                     boundary))
          (y0 (apply #'min (map #'second mpts)))
          (y1 (apply #'max (map #'second mpts))))
    (do ((y (* (floor (/ y0 step)) step) (+ y step)))
      ((> y y1))
      (let** ((spans (spans mpts y))
              (xspans (map (lambda (x)
                             (list (- (* cos x) (* sin y))
                                   (+ (* cos y) (* sin x))))
                           spans)))
        (dolist (i (range 0 (1- (length xspans)) 2))
          (ctx.moveTo (aref xspans i 0) (aref xspans i 1))
          (ctx.lineTo (aref xspans (1+ i) 0) (aref xspans (1+ i) 1)))))))

(defun clipping ()
  (let** ((w (window 0 0 0.75 0.75 title: "Clipping"))
          (canvas (add-widget w (create-element "canvas")))
          (ctx (canvas.getContext "2d"))
          (pts (list))
          (#'repaint ()
            (setf canvas.width canvas.offsetWidth)
            (setf canvas.height canvas.offsetHeight)
            (setf ctx.fillStyle "#000")
            (ctx.fillRect 0 0 canvas.width canvas.height)
            (setf ctx.lineWidth 2)
            (setf ctx.strokeStyle "#080")
            (ctx.beginPath)
            (let ((angle (/ (clock) 20000)))
              (hatch ctx pts angle 20)
              (hatch ctx pts (+ angle (/ pi 3)) 20)
              (hatch ctx pts (+ angle (* 2 (/ pi 3))) 20))
            (ctx.stroke)
            (ctx.beginPath)
            (enumerate (i (x y) pts)
              (if i
                  (ctx.lineTo x y)
                  (ctx.moveTo x y)))
            (ctx.closePath)
            (setf ctx.strokeStyle "#FFF")
            (ctx.stroke))
          (#'down (x y)
            (push (list x y) pts)
            (repaint)))
    (set-layout w (V border: 8 spacing: 8
                     (dom canvas)))
    (setf canvas.data-resize #'repaint)
    (set-handler canvas onmousedown
      (event.preventDefault)
      (event.stopPropagation)
      (apply #'down (relative-pos event canvas)))
    (set-interval #'repaint 20)
    (show-window w center: true)))

(defun main ()
  (clipping))

(main)