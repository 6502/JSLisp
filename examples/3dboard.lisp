(import * from geo3d)
(import * from gui)
(import * from layout)

(defun view ()
  (let** ((w (window 0 0 0.75 0.75 title: "3d view"))
          (view (add-widget w (create-element "canvas")))
          (s 0.0)
          (eye-angle-a 0)
          (eye-dist-a 600)
          (eye-height-a 1200)
          (up-a (v 0 -1 0))
          (eye-angle-b 0)
          (eye-dist-b 600)
          (eye-height-b 1200)
          (up-b (v 0 -1 0))
          (#'flip ()
            (setf eye-angle-a eye-angle-b)
            (setf eye-angle-b (- pi eye-angle-a))
            (setf s 0)
            (let** ((start (clock))
                    (aa (set-interval (lambda ()
                                        (setf s (/ (- (clock) start) 1000))
                                        (when (>= s 1) (clear-interval aa))
                                        (repaint))
                                      10))))
            (repaint))
          (#'repaint ()
            (let** ((#'ii (a b)
                      (cond
                        ((<= s 0) a)
                        ((>= s 1) b)
                        (true
                          (let ((w (- (* 3 s s) (* 2 s s s))))
                            (+ (* w a) (* (- 1 w) b))))))
                    (eye-angle (ii eye-angle-a eye-angle-b))
                    (eye-dist (ii eye-dist-a eye-dist-b))
                    (eye-height (ii eye-height-a eye-height-b))
                    (up (v (ii (x up-a) (x up-b))
                           (ii (y up-a) (y up-b))
                           (ii (z up-a) (z up-b))))
                    (eye (v (* eye-dist (cos eye-angle))
                            eye-height
                            (* eye-dist (sin eye-angle))))
                    (width view.offsetWidth)
                    (height view.offsetHeight)
                    (ctx (view.getContext "2d"))
                    (dx (/ width 2))
                    (dy (/ height 2))
                    (cam (camera eye (v 0 0 0) up
                                 (* 1.2 (min width height))))
                    (#'move-to (p)
                      (let (((xx yy) (camera-map cam p)))
                        (ctx.moveTo (+ dx xx) (+ dy yy))))
                    (#'line-to (p)
                      (let (((xx yy) (camera-map cam p)))
                        (ctx.lineTo (+ dx xx) (+ dy yy))))
                    (#'xzquad (x0 z0 x1 z1 color)
                      (ctx.beginPath)
                      (move-to (v x0 0 z0))
                      (line-to (v x1 0 z0))
                      (line-to (v x1 0 z1))
                      (line-to (v x0 0 z1))
                      (ctx.closePath)
                      (setf ctx.fillStyle color)
                      (ctx.fill))
                    (#'xzcircle (x z r color1 color2)
                      (dolist (y (fp-range 0 20 2))
                        (ctx.beginPath)
                        (enumerate (i a (fp-range 0 (* 2 pi) 32))
                          ((if (= i 0) #'move-to #'line-to)
                           (v (+ x (* r (cos a))) y (+ z (* r (sin a))))))
                        (ctx.closePath)
                        (setf ctx.fillStyle (if (= y 20) color2 color1))
                        (ctx.fill))))
              (setf view.width width)
              (setf view.height height)
              (setf ctx.fillStyle "#EEEEEE")
              (ctx.fillRect 0 0 width height)
              (xzquad -410 -410 410 410 "446688")
              (dotimes (i 8)
                (dotimes (j 8)
                  (xzquad (* 100 (- i 4)) (* 100 (- j 4))
                          (* 100 (- i 3)) (* 100 (- j 3))
                          (if (even? (+ i j))
                              "#DDEEFF"
                              "#AABBCC"))
                  (cond
                    ((and (< i 3) (odd? (+ i j)))
                     (xzcircle (* 100 (- i 3.5)) (* 100 (- j 3.5)) 30
                               "#888888" "#000000"))
                    ((and (> i 4) (odd? (+ i j)))
                     (xzcircle (* 100 (- i 3.5)) (* 100 (- j 3.5)) 30
                               "#DDDDDD" "#FFFFFF"))))))))
    (set-layout w (V border: 8 spacing: 8
                     (dom view)))
    (setf view."data-resize" #'repaint)
    (setf view.onmousedown #'flip)
    (show-window w center: true)))

(defun main () (view))
(main)
