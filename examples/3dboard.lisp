(import * from geo3d)
(import * from gui)
(import * from layout)

(defun view ()
  (let** ((w (window 0 0 0.75 0.75 title: "3d view"))
          (view (add-widget w (create-element "canvas")))
          (s 0.0)
          (eye-angle-a 0)
          (eye-dist-a 800)
          (eye-height-a 1100)
          (up-a (v 0 -1 0))
          (eye-angle-b 0)
          (eye-dist-b 800)
          (eye-height-b 1100)
          (up-b (v 0 -1 0))
          (3d true)
          (pos (list 08 09 10 11 12 10 09 08
                     07 07 07 07 07 07 07 07
                     00 00 00 00 00 00 00 00
                     00 00 00 00 00 00 00 00
                     00 00 00 00 00 00 00 00
                     00 00 00 00 00 00 00 00
                     01 01 01 01 01 01 01 01
                     02 03 04 05 06 04 03 02))
          (images (let ((count 0))
                    (map (lambda (n)
                           (let ((img (create-element "img")))
                             (setf img.onload (lambda ()
                                                (when (= (incf count) 24)
                                                  (repaint))))
                             (setf img.src ~"examples/img/{n}.png")
                             img))
                         (list "wp" "wr" "wn" "wb" "wq" "wk"
                               "bp" "br" "bn" "bb" "bq" "bk"
                               "wp3" "wr3" "wn3" "wb3" "wq3" "wk3"
                               "bp3" "br3" "bn3" "bb3" "bq3" "bk3"))))
          (imz '((18 38) (19 47) (35 54) (20 50) (23 73) (22 71)
                 (17 37) (20 47) (28 56) (19 51) (24 75) (23 71)))
          (#'animate()
            (setf s 0)
            (let** ((start (clock))
                    (aa (set-interval (lambda ()
                                        (setf s (/ (- (clock) start) 1000))
                                        (when (>= s 1) (clear-interval aa))
                                        (repaint))
                                      10))))
            (repaint))
          (#'flip ()
            (setf eye-angle-a eye-angle-b)
            (setf eye-dist-a eye-dist-b)
            (setf eye-angle-b (- pi eye-angle-a))
            (animate))
          (#'3d<=>2d ()
            (setf 3d (not 3d))
            (setf eye-angle-a eye-angle-b)
            (setf eye-dist-a eye-dist-b)
            (setf eye-dist-b (if 3d 800 1))
            (animate))
          (#'repaint ()
            (let** ((#'ii (a b)
                      (cond
                        ((<= s 0) a)
                        ((>= s 1) b)
                        (true
                          (let ((w (- (* 3 s s) (* 2 s s s))))
                            (+ (* w b) (* (- 1 w) a))))))
                    (eye-angle (ii eye-angle-a eye-angle-b))
                    (eye-dist (ii eye-dist-a eye-dist-b))
                    (eye-height (ii eye-height-a eye-height-b))
                    (up (v (ii (x up-a) (x up-b))
                           (ii (y up-a) (y up-b))
                           (ii (z up-a) (z up-b))))
                    (eye (v (* eye-dist (cos eye-angle))
                            eye-height
                            (* eye-dist (sin eye-angle))))
                    (width view.offsetWidth)
                    (height view.offsetHeight)
                    (ctx (view.getContext "2d"))
                    (dx (/ width 2))
                    (dy (/ height 2))
                    (cam (camera eye (v 0 0 0) up
                                 (* 1.2 (min width height))))
                    (#'move-to (p)
                      (let (((xx yy) (camera-map cam p)))
                        (ctx.moveTo (+ dx xx) (+ dy yy))))
                    (#'line-to (p)
                      (let (((xx yy) (camera-map cam p)))
                        (ctx.lineTo (+ dx xx) (+ dy yy))))
                    (#'xzquad (x0 z0 x1 z1 color)
                      (ctx.beginPath)
                      (move-to (v x0 0 z0))
                      (line-to (v x1 0 z0))
                      (line-to (v x1 0 z1))
                      (line-to (v x0 0 z1))
                      (ctx.closePath)
                      (setf ctx.fillStyle color)
                      (ctx.fill))
                    (#'xzcircle (x z r color1 color2)
                      (dolist (y (fp-range 0 20 2))
                        (ctx.beginPath)
                        (enumerate (i a (fp-range 0 (* 2 pi) 16))
                          ((if (= i 0) #'move-to #'line-to)
                           (v (+ x (* r (cos a))) y (+ z (* r (sin a))))))
                        (ctx.closePath)
                        (setf ctx.fillStyle (if (= y 20) color2 color1))
                        (ctx.fill))))
              (setf view.width width)
              (setf view.height height)
              (setf ctx.fillStyle "#EEEEEE")
              (ctx.fillRect 0 0 width height)

              (xzquad -410 -410 410 410 "446688")
              (dotimes (i 8)
                (dotimes (j 8)
                  (xzquad (* 100 (- i 4)) (* 100 (- j 4))
                          (* 100 (- i 3)) (* 100 (- j 3))
                          (if (even? (+ i j))
                              "#DDEEFF"
                              "#AABBCC"))))
              (let ((sprites (list)))
                (dotimes (i 8)
                  (dotimes (j 8)
                    (let ((ix (1- (aref pos (+ (* i 8) j)))))
                      (when (>= ix 0)
                        (let ((img (aref images (if 3d (+ 12 ix) ix))))
                          (when (and img (> img.width 0))
                            (if 3d
                                (let* ((cc (v (* 100 (- i 3.5)) 0 (* 100 (- j 3.5))))
                                       (p0 (camera-map cam cc))
                                       ;(p1 (camera-map cam (v+ cc (v 0 100 0))))
                                       ((hx hy) (aref imz ix))
                                       (dist (vlen (v- eye cc)))
                                       (sf (/ (* 1.5 (vlen cam.u)) dist)))
                                  (push (list dist
                                              img
                                              (+ dx (x p0) (- (* sf hx)))
                                              (+ dy (y p0) (- (* sf hy)))
                                              (* sf img.width)
                                              (* sf img.height))
                                        sprites))
                                (let* ((cc (v (* 100 (- i 3.5)) 0 (* 100 (- j 3.5))))
                                       (p0 (camera-map cam cc))
                                       (dist (vlen (v- eye cc)))
                                       (sf (/ (* 0.65 (vlen cam.u)) dist)))
                                  (push (list dist
                                              img
                                              (+ dx (x p0) (- (* sf img.width 0.5)))
                                              (+ dy (y p0) (- (* sf img.height 0.5)))
                                              (* sf img.width)
                                              (* sf img.height))
                                        sprites)))))))))
                (dolist ((zdist img x0 y0 w h) (sort sprites (lambda (x y) (> (first x) (first y)))))
                  (declare (ignorable zdist))
                  (ctx.drawImage img x0 y0 w h))))))
    (set-layout w (V border: 8 spacing: 8
                     (dom view)))
    (setf view."data-resize" #'repaint)
    (setf view.onmousedown (lambda (event)
                             (if (= event.button 1)
                                 (3d<=>2d)
                                 (flip))))
    (show-window w center: true)))

(defun main () (view))
(main)
