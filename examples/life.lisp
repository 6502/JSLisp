(import * from gui)
(defconstant SHIFT 6)
(defconstant SZ (ash 1 SHIFT))
(defconstant MASK (1- (* SZ SZ)))
(defconstant SF 4)
(import * from layout)
(import * from graphics)

(defun life ()
  (let** ((w (window 0 0 (+ (* SZ SF) 40) (+ (* SZ SF) 100)
                     title: "The Game of Life"))
          (field (make-array (* SZ SZ) 0))
          (display (add-widget w (set-style (create-element "canvas")
                                            position "absolute"
                                            px/width (* SF SZ)
                                            px/height (* SF SZ))))
          (start/stop (add-widget w (button "Start/stop" #'start/stop)))
          (clear (add-widget w (button "Clear" #'clear)))
          (random (add-widget w (button "Random" #'random)))
          (run-timer null)
          (alive (list))
          (#'recalc ()
            (with-canvas display
              (let ((new-field (make-array (* SZ SZ) 0))
                    (checklist (list))
                    (new-alive (list)))
                (macrolet ((cell (i) `(aref field (logand ,i MASK)))
                           (new-cell (i) `(aref new-field (logand ,i MASK)))
                           (nhbor (fn var item)
                                  `(,fn (,item (- ,var (1+ SZ)))
                                        (,item (- ,var SZ))
                                        (,item (- ,var (1- SZ)))
                                        (,item (- ,var 1))
                                        (,item (+ ,var 1))
                                        (,item (+ ,var (1- SZ)))
                                        (,item (+ ,var SZ))
                                        (,item (+ ,var (1+ SZ))))))
                  (labels ((check (i)
                             (unless (new-cell i)
                               (setf (new-cell i) 1)
                               (push i checklist))))
                    (dolist (x alive)
                      (nhbor progn x check))
                    (dolist (i checklist)
                      (let ((n (nhbor + i cell)))
                        (if (or (= n 3)
                                (and (= n 2) (cell i)))
                            (progn
                              (unless (cell i)
                                (fill-style "#000000")
                                (fill-rect (* SF (logand i (1- SZ)))
                                           (* SF (ash i (- SHIFT)))
                                           SF SF))
                              (setf (new-cell i) 1)
                              (push i new-alive))
                            (progn
                              (when (cell i)
                                (fill-style "#FFFFFF")
                                (fill-rect (* SF (logand i (1- SZ)))
                                           (* SF (ash i (- SHIFT)))
                                           SF SF))
                              (setf (new-cell i) 0)))))))
                (setf field new-field)
                (setf alive new-alive))))
          (#'refresh ()
            (setf display.width (* SF SZ))
            (setf display.height (* SF SZ))
            (with-canvas display
              (let ((p 0))
                (dotimes (y SZ)
                  (dotimes (x SZ)
                    (fill-style (if (aref field p) "#000000" "#FFFFFF"))
                    (fill-rect (* SF x) (* SF y) SF SF)
                    (incf p))))))
          (#'start/stop ()
            (if (null? run-timer)
                (setf run-timer (set-interval #'recalc 10))
                (progn
                  (clear-interval run-timer)
                  (setf run-timer null))))
          (#'random ()
            (setf alive (list))
            (dotimes (i (* SZ SZ))
              (when (setf (aref field i) (random-int 2))
                (push i alive)))
            (refresh))
          (#'clear ()
            (setf alive (list))
            (dotimes (i (* SZ SZ))
              (setf (aref field i) 0))
            (refresh)))
    (set-layout w (V spacing: 8 border: 8
                     :filler:
                     size: (* SF SZ)
                     (H :filler: size: (* SF SZ) (dom display) :filler:)
                     :filler:
                     size: 30
                     (H :filler:
                        size: 80 (dom start/stop) (dom clear) (dom random)
                        :filler:)))
    (setf w.close-cback
          (lambda () (when run-timer (start/stop))))
    (random)
    (show-window w center: true)))

(defun main ()
  (life))

(main)
