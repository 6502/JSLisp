(import * from geo3d)
(import * from gui)
(import * from graphics)
(import * from layout)
(import examples/chess as chess)

(defvar *image-urls* (let ((res #()))
                       (dolist (col "wb")
                         (dolist (piece "prnbqk")
                           (setf (aref res (+ col piece))
                                 (image-data-url ~"examples/img/{col}{piece}.png"))
                           (setf (aref res (+ col piece "3"))
                                 (image-data-url ~"examples/img/{col}{piece}3.png"))))
                       res))

(defun chessboard (&key (position "rnbqkbnr\
                                   pppppppp\
                                   ........\
                                   ........\
                                   ........\
                                   ........\
                                   PPPPPPPP\
                                   RNBQKBNR")
                        move-cback
                        arrow-cback)
  (let** ((view (create-element "canvas"))
          (s 0.0)
          (eye-angle-a 0)
          (eye-dist-a 800)
          (eye-height-a 1100)
          (up-a (v 0 -1 0))
          (eye-angle-b 0)
          (eye-dist-b 800)
          (eye-height-b 1100)
          (up-b (v 0 -1 0))
          (3d true)
          (arrows (list))
          (pos (make-array 64 0))
          (color 0)
          (#'set-position (p)
            (enumerate (i c p)
              (setf (aref pos i) (1+ (index c "PRNBQKprnbqk"))))
            (repaint))
          (images (let ((count 0))
                    (map (lambda (n)
                           (let ((img (create-element "img")))
                             (set-handler img onload
                               (when (= (incf count) 24)
                                 (repaint)))
                             (setf img.src (aref *image-urls* n))
                             img))
                         (list "wp" "wr" "wn" "wb" "wq" "wk"
                               "bp" "br" "bn" "bb" "bq" "bk"
                               "wp3" "wr3" "wn3" "wb3" "wq3" "wk3"
                               "bp3" "br3" "bn3" "bb3" "bq3" "bk3"))))
          (imz '((18 38) (19 47) (35 54) (20 50) (23 73) (24 74)
                 (17 37) (20 47) (28 56) (19 51) (24 75) (23 76)))
          (dragged null)
          (coords false)
          (autoplay false)
          (#'animate()
            (setf s 0)
            (let** ((start (clock))
                    (aa (set-interval (lambda ()
                                        (setf s (/ (- (clock) start) 1000))
                                        (when (>= s 1)
                                          (clear-interval aa)
                                          (setf eye-dist-a eye-dist-b)
                                          (setf eye-angle-a eye-angle-b))
                                        (repaint))
                                      10))))
            (repaint))
          (#'animation ()
            (or (/= eye-dist-a eye-dist-b)
                (/= eye-angle-a eye-angle-b)))
          (#'flip ()
            (setf eye-angle-b (- pi eye-angle-a))
            (animate))
          (#'3d<=>2d ()
            (setf 3d (not 3d))
            (setf eye-dist-b (if 3d 800 1))
            (animate))
          (#'cam ()
            (let** ((#'ii (a b)
                      (cond
                        ((<= s 0) a)
                        ((>= s 1) b)
                        (true
                          (let ((w (- (* 3 s s) (* 2 s s s))))
                            (+ (* w b) (* (- 1 w) a))))))
                    (eye-angle (ii eye-angle-a eye-angle-b))
                    (eye-dist (ii eye-dist-a eye-dist-b))
                    (eye-height (ii eye-height-a eye-height-b))
                    (up (v (ii (x up-a) (x up-b))
                           (ii (y up-a) (y up-b))
                           (ii (z up-a) (z up-b))))
                    (eye (v (* eye-dist (cos eye-angle))
                            eye-height
                            (* eye-dist (sin eye-angle))))
                    (width view.offsetWidth)
                    (height view.offsetHeight))
              (camera eye (v 0 0 0) up
                      (* 1.2 (min width height)))))
          (#'revp (xs ys)
            ;; eye.y + t*(p.y - eye.y) = 0
            ;; t = (eye.y - p.y) / eye.y
            (let* ((cam (cam))
                   (p (camera-invmap cam
                                      (- xs (/ view.offsetWidth 2))
                                      (- ys (/ view.offsetHeight 2))))
                   (t (/ (y cam.o) (- (y cam.o) (y p)))))
              (v+ cam.o (v* (v- p cam.o) t))))
          (#'ij (xs ys)
            (let ((rp (revp xs ys)))
              (list (+ 4 (floor (/ (x rp) 100)))
                    (+ 4 (floor (/ (z rp) 100))))))
          (#'repaint ()
            (let** ((cam (cam))
                    (ctx (view.getContext "2d"))
                    (width view.offsetWidth)
                    (height view.offsetHeight)
                    (eye cam.o)
                    (csx (/ width 2))
                    (csy (/ height 2))
                    (#'text-at (text color p)
                      (let (((xx yy) (camera-map cam p)))
                        (ctx.save)
                        (setf ctx.textAlign "center")
                        (setf ctx.textBaseline "center")
                        (setf ctx.fillStyle color)
                        (ctx.fillText text (+ csx xx) (+ csy yy))
                        (ctx.restore)))
                    (#'move-to (p)
                      (let (((xx yy) (camera-map cam p)))
                        (ctx.moveTo (+ csx xx) (+ csy yy))))
                    (#'line-to (p)
                      (let (((xx yy) (camera-map cam p)))
                        (ctx.lineTo (+ csx xx) (+ csy yy))))
                    (#'xzquad (x0 z0 x1 z1 color)
                      (ctx.beginPath)
                      (move-to (v x0 0 z0))
                      (line-to (v x1 0 z0))
                      (line-to (v x1 0 z1))
                      (line-to (v x0 0 z1))
                      (ctx.closePath)
                      (setf ctx.fillStyle color)
                      (ctx.fill))
                    (#'xzcircle (x z r color)
                      (ctx.beginPath)
                      (enumerate (i a (fp-range 0 (* 2 pi) 32))
                        ((if (= i 0) #'move-to #'line-to)
                         (v (+ x (* r (cos a))) 0 (+ z (* r (sin a))))))
                      (ctx.closePath)
                      (setf ctx.fillStyle color)
                      (ctx.fill)))
              (setf view.width width)
              (setf view.height height)
              (xzquad -410 -410 410 410 "#886644")
              (dotimes (i 8)
                (dotimes (j 8)
                  (xzquad (* 100 (- i 4)) (* 100 (- j 4))
                          (* 100 (- i 3)) (* 100 (- j 3))
                          (if (even? (+ i j))
                              "#CCAA88"
                              "#FFEEDD"))))
              (dolist ((i0 j0 i1 j1) arrows)
                (if (and (= i0 i1) (= j0 j1))
                    (xzcircle (* 100 (- i0 3.5)) (* 100 (- j0 3.5))
                              50 "rgba(255,0,0,0.75)")
                    (let* ((x0 (* 100 (- i0 3.5)))
                           (z0 (* 100 (- j0 3.5)))
                           (x1 (* 100 (- i1 3.5)))
                           (z1 (* 100 (- j1 3.5)))
                           (dx (- x1 x0))
                           (dz (- z1 z0))
                           (k (/ 10 (sqrt (+ (* dx dx) (* dz dz))))))
                      (ctx.beginPath)
                      (move-to (v (+ x0 (* k dz)) 0 (- z0 (* k dx))))
                      (line-to (v x1 0 z1))
                      (line-to (v (- x0 (* k dz)) 0 (+ z0 (* k dx))))
                      (ctx.closePath)
                      (setf ctx.fillStyle "rgba(255,0,0,0.75)")
                      (ctx.fill))))
              (let ((sprites (list))
                    (3d (and 3d (= eye-dist-a eye-dist-b)))
                    (pzs (list)))
                (dotimes (i 8)
                  (dotimes (j 8)
                    (let ((ix (1- (aref pos (+ (* i 8) (- 7 j))))))
                      (when (>= ix 0)
                        (push (list (v (* 100 (- i 3.5)) 0 (* 100 (- j 3.5))) ix)
                              pzs)))))
                (when dragged
                  (push dragged pzs))
                (dolist ((cc ix) pzs)
                  (if 3d
                      (let* ((img (aref images (+ 12 ix)))
                             (p0 (camera-map cam cc))
                             (p1 (camera-map cam (v+ cc (v 0 100 0))))
                             (aa (+ (/ pi 2)
                                    (atan2 (- (y p1) (y p0))
                                           (- (x p1) (x p0)))))
                             ((hx hy) (aref imz ix))
                             (dist (vlen (v- eye cc)))
                             (sf (/ (* 1.5 (vlen cam.u)) dist)))
                        (push (list dist
                                    aa
                                    (x p0) (y p0)
                                    img
                                    (+ csx (x p0) (- (* sf hx)))
                                    (+ csy (y p0) (- (* sf hy)))
                                    (* sf img.width)
                                    (* sf img.height))
                              sprites))
                      (let* ((img (aref images ix))
                             (p0 (camera-map cam cc))
                             (dist (vlen (v- eye cc)))
                             (sf (/ (* 0.65 (vlen cam.u)) dist)))
                        (push (list dist
                                    0.0
                                    (x p0) (y p0)
                                    img
                                    (+ csx (x p0) (- (* sf img.width 0.5)))
                                    (+ csy (y p0) (- (* sf img.height 0.5)))
                                    (* sf img.width)
                                    (* sf img.height))
                              sprites))))
                (dolist ((zdist aa cx cy img x0 y0 w h)
                         (sort sprites
                               (lambda (x y)
                                 (> (first x) (first y)))))
                  (declare (ignorable zdist))
                  (when (/= 0 aa)
                    (ctx.save)
                    (ctx.translate (+ csx cx) (+ csy cy))
                    (ctx.rotate aa)
                    (ctx.translate (- 0 csx cx) (- 0 csy cy)))
                  (ctx.drawImage img x0 y0 w h)
                  (when (/= 0 aa)
                    (ctx.restore))))
              (when coords
                (dotimes (i 8)
                  (dotimes (j 8)
                    (text-at (+ (aref "abcdefgh" (- 7 j)) (aref "87654321" i))
                             "#F00"
                             (v (* 100 (- i 3.15)) 0 (* 100 (- j 3.15)))))))
              (let ((h (/ (min view.width view.height) 40)))
                (setf ctx.font ~"{h}px sans-serif")
                (setf ctx.textAlign "center")
                (setf ctx.textBaseline "middle")
                (setf ctx.fillStyle "rgba(255,255,255,0.5)")
                (ctx.fillText "2D/3D" (* h 2) h)
                (ctx.fillText "flip" (* h 5) h)
                (ctx.fillText "by Andrea \"6502\" Griffini"
                              (/ view.width 2)
                              (- view.height h)))))
          (lastpos null)
          (logwindow null))
    (set-handler document onmousemove
      (let* ((rp (relative-pos event view))
             ((i j) (apply #'ij rp)))
        (setf lastpos (list i j))))
    (set-handler document onkeydown
      (when (and lastpos
                 (list? lastpos)
                 (= 2 (length lastpos))
                 (<= 0 (first lastpos) 7)
                 (<= 0 (second lastpos) 7))
        (let** (((i j) lastpos)
                (ix (+ (* 8 i) (- 7 j)))
                (pcodes '#.(map #'char-code "EPRNBQK")))
          (cond
            ((= event.which #.(char-code "Z"))
             (set-position "........\
                            ........\
                            ........\
                            ........\
                            ........\
                            ........\
                            ........\
                            ........"))
            ((= event.which #.(char-code "S"))
             (set-position "rnbqkbnr\
                            pppppppp\
                            ........\
                            ........\
                            ........\
                            ........\
                            PPPPPPPP\
                            RNBQKBNR"))
            ((= event.which #.(char-code "A"))
             (setf autoplay (not autoplay)))
            ((= event.which #.(char-code " "))
             (setf color (- 1 color)))
            ((= event.which #.(char-code "C"))
             (setf coords (not coords))
             (repaint))
            ((= event.which 13)
             (let ((fen (join (map (lambda (x) (aref "1PRNBQKprnbqk" x)) pos) "")))
               (setf fen (join (map (lambda (i) (slice fen (* i 8) (* (1+ i) 8))) (range 8)) "/"))
               (setf fen (replace fen "1+" #'length))
               (when (null? logwindow)
                 (let** ((w (window 0 0 675 449 title: "Log window"))
                         (log (add-widget w (text-area "log")))
                         (Clear (add-widget w (button "Clear" (lambda () (setf (text log) ""))))))
                   (set-layout w (V border: 8 spacing: 8
                                    weight: 289
                                    (dom log) size: 30
                                    (H spacing: 8
                                       :filler:
                                       size: 80
                                       (dom Clear)
                                       :filler:)))
                   (show-window w center: true)
                   (setf w.add (lambda (text)
                                 (setf (text log) (+ (text log) text "\n"))))
                   (setf logwindow w)))
               (show-window logwindow)
               (logwindow.add fen)))
            ((find event.which pcodes)
             (let ((code (index event.which pcodes)))
               (when (and (> code 0) (/= color 0))
                 (incf code 6))
               (setf (aref pos ix) code)
               (repaint)))))))
    (set-handler view onmousedown
      (event.preventDefault)
      (event.stopPropagation)
      (let* ((rp (relative-pos event view))
             ((i j) (apply #'ij rp)))
        (cond
          ((and (<= 0 i 7) (<= 0 j 7))
           (if event.shiftKey
               (when arrow-cback
                 (push (list i j i j) arrows)
                 (repaint)
                 (tracking (lambda (xx yy)
                             (let* (((x0 y0) (element-pos view))
                                    ((i j) (ij (- xx x0) (- yy y0))))
                               (when (and (<= 0 i 7) (<= 0 j 7))
                                 (setf (aref (last arrows) 2) i)
                                 (setf (aref (last arrows) 3) j)
                                 (repaint))))
                           (lambda (xx yy)
                             (declare (ignorable xx yy))
                             (do ((a (last arrows))
                                  (i (- (length arrows) 2) (1- i)))
                               ((or (< i 0) (list= (aref arrows i) a))
                                (when (>= i 0)
                                  (pop arrows)
                                  (splice arrows i 1))
                                (funcall arrow-cback arrows)
                                (repaint))))))
               (let ((ix (1- (aref pos (+ (* i 8) (- 7 j))))))
                 (when (and move-cback (>= ix 0))
                   (setf (aref pos (+ (* i 8) (- 7 j))) 0)
                   (setf dragged (list (apply #'revp rp) ix))
                   (tracking (lambda (xx yy)
                               (let* (((x0 y0) (element-pos view))
                                      (xp (revp (- xx x0) (- yy y0))))
                                 (setf (first dragged) xp)
                                 (repaint)))
                             (lambda (xx yy)
                               (let* (((x0 y0) (element-pos view))
                                      ((ii jj) (ij (- xx x0) (- yy y0))))
                                 (setf dragged null)
                                 (splice arrows)
                                 (when arrow-cback
                                   (funcall arrow-cback arrows))
                                 (setf (aref pos (+ (* 8 i) (- 7 j))) (1+ ix))
                                 (if autoplay
                                     (funcall move-cback i j ii jj)
                                     (progn
                                       (setf (aref pos (+ (* 8 ii) (- 7 jj)))
                                             (aref pos (+ (* 8 i) (- 7 j))))
                                       (setf (aref pos (+ (* 8 i) (- 7 j))) ".")))
                                 (repaint)))
                             "move")))))
          ((not (animation))
           (let ((h (/ (min view.height view.width) 40)))
             (when (< event.clientY (* h 2))
               (if (< event.clientX (* h 4))
                   (3d<=>2d)
                   (flip))))))))
    (setf view.repaint #'repaint)
    (setf view.pos pos)
    (setf view.set-position #'set-position)
    (setf view.arrows arrows)
    (set-position position)
    view))

(defun main ()
  (set-style document.body
             overflow "hidden"
             background "linear-gradient(#142, #284)"
             padding "0px"
             margin "0px")
  (let** ((board (chess:chessboard))
          (view (chessboard move-cback: #'move-cback
                            arrow-cback: #'arrow-cback))
          (pnames #((#.chess:+WP+    "P")
                    (#.chess:+WR+    "R")
                    (#.chess:+WN+    "N")
                    (#.chess:+WB+    "B")
                    (#.chess:+WQ+    "Q")
                    (#.chess:+WK+    "K")
                    (#.chess:+BP+    "p")
                    (#.chess:+BR+    "r")
                    (#.chess:+BN+    "n")
                    (#.chess:+BB+    "b")
                    (#.chess:+BQ+    "q")
                    (#.chess:+BK+    "k")
                    (#.chess:+EMPTY+ ".")))
          (#'set-position ()
            (view.set-position (join (map (lambda (x)
                                            (or (aref pnames x) ""))
                                          chess:*sq*)
                                     "")))
          (#'move-cback (i j ii jj)
            (chess:with-board board
                              (let ((mm (list))
                                    (x0 (chess:tosq i (- 7 j)))
                                    (x1 (chess:tosq ii (- 7 jj))))
                                (chess:move-map (lambda (m)
                                                  (when (and (= (chess:move-x0 m) x0)
                                                             (= (chess:move-x1 m) x1))
                                                    (push m mm))))
                                (when (> (length mm) 0)
                                  (chess:play (first mm))
                                  (set-position)
                                  (set-timeout (lambda ()
                                                 (chess:with-board board
                                                                   (chess:computer 1)
                                                                   (set-position)))
                                               0)))))
          (#'arrow-cback (arrows)
            (declare (ignorable arrows)))
          (cached-size ""))
    (setf view.style.opacity 0)
    (append-child document.body view)
    (let** ((shield (create-element "div"))
            (t0 (clock))
            (#'show ()
              (let** ((t (- (/ (- (clock) t0) 1000) 0.25))
                      (c (max 0 (min 1 t)))
                      (s (- (* 3 c c) (* 2 c c c))))
                (setf shield.style.opacity (- 1 s))
                (if (< t 1)
                    (set-timeout #'show 0)
                    (remove-child document.body shield)))))
      (set-style shield
                 position "absolute"
                 left "0px"
                 top "0px"
                 right "0px"
                 bottom "0px"
                 background-color "#000")
      (append-child document.body shield)
      (setf view.style.opacity 1)
      (set-timeout #'show 0))
    (set-interval (lambda ()
                    (let ((sz (+ (screen-width) "x" (screen-height))))
                      (when (/= sz cached-size)
                        (setf cached-size sz)
                        (set-style document.body
                                   height (+ (screen-height) "px"))
                        (set-style view
                                   position "absolute"
                                   left "0px"
                                   top "0px"
                                   width (+ (screen-width) "px")
                                   height (+ (screen-height) "px"))
                        (view.repaint))))
                  10)))

(main)
