*1 JsLisp
= JsLisp
A Lisp compiler targeting Javascript

*2 A Lisp compiler targeting Javascript
{JsLisp is}

- A Lisp
- Compiler
- Targeting Javascript

*3 A Lisp
{A Lisp}

Lisp is a family of dialects, the two most
known being Common Lisp and Scheme.

JsLisp is close to Common Lisp
but it's not Common Lisp.

*3.1 Common Lisp similarities
{JsLisp and Common Lisp similarities}

- A Lisp-2 (actually a Lisp-3)
- Macros and reader macros
- Macro hygiene is not forced
- Looping constructs [do], [dotimes], [dolist] ...
- [tagbody/go], [throw/catch], [unwind-protect]
- Namespace partitioning (similar to CL packages)

*3.2 Common Lisp differences
{JsLisp and Common Lisp differences}

- No [cons] cells, lists are Javascript arrays
- No numeric tower (only [double-float]s)
- No [T]/[NIL]
- [true], [false], [null], [undefined], [NaN]
- [Lisp-3]: a function and a macro can have
  the same name. [(funcall #'x ...)] {may be}
  logically different from [(x ...)]. Rarely is.

*4 Compiler
{Compiler}

JsLisp is a compiler-only implementation, there
is no Lisp interpreter

- Semantic checks at compile time
- JsLisp functions are Javascript functions
- Thanks to JIT speed is quite good
- There is a treeshaker/minifier that provides
  source code protection

*4.1 Semantic checks
{Semantic checks}

JsLisp compiler provides some semantic check
at compile time:

- References to undefined variables
- References to undefined functions
- Bad parameter count in static function calls
- Bad keyword paramters in static function calls

*4.2 JsLisp functions are Javascript functions
{compiles to Javascript functions}

[[
(defun square (x) (* x x))
;; ==> square

((function square).toString)
;; ==> "function (d$$x){return
           (((((d$$x)*(d$$x)))));}"
]]

*5 Targeting Javascript
{Targeting Javascript}

- Runs in recent desktop browsers
- Runs in HTML5 smartphones/tablets
- Runs in node.js

Running in [node.js] and in the browser allows a
single-language solution for web applications
