@ Reference

A reference generated from docstrings documenting all functions and
macros defined can be obtained by clicking the following button:

<<
<input type=button value="JsLisp reference" onclick="window.open('jslisp.html?load=reference.lisp', '_blank', 'width=800, height=800, left=100, top=100')"/>
>>

In the subsections instead there will be a schematic
per-topic description of how many parts of JsLisp are
supposed to work.

@@ Modules

JsLisp allows partitioning the global namespace in modules
where different modules can use the same name with distinct
meanings.

Importing a module simply sets a new current module name
and [load]s a lisp source file. Then possibly adds to the current
symbol alias table some or all of the exported names.

[Modules
; This imports all exported names from the
; examples/raster module into the current
; *symbol-aliases* table.
(import * from examples/raster)
.("hline" "box" "clear" "frame" "line" ... )

'hline
.examples/raster:hline

; This imports (loads) the module and assigns
; a nickname, but defines no symbol aliases
(import graphics as g)
.("rgb" "rgba" "css-color" "random-color" "with-canvas")

(random-color)
WARNING: Undefined function random-color
**ERROR**: ReferenceError: function random-color
.           is not defined

(g:random-color)
.{"r":182,"g":132,"b":188}

; This imports only two specific names from
; the gui module
(import (show set-style) from gui)
.("set-style" "element-pos" "event-pos" ...)

'set-style
.gui:set-style

'element-pos
.element-pos

; All currently active symbol aliases are kept
; in the *symbol-aliases* map and are checked
; first by the reader when interpreting a symbol
(map #'display (keys *symbol-aliases*))
.!hline
.!box
.!clear
.!frame
.!line
.!bezier
.!ellipse
.!ellipse-frame
.!fill
.!show
.!set-style
.("!hline" "!box" "!clear" "!frame" "!line" ...)
]

When defining a macro in a module that needs to intern symbols in
the caller module the reader macro [,#<symbol>] can be handy expanding
to [,(intern (symbol-name '<symbol>))] thus interning the literal
[<symbol>] in the current module when the macro expansion is being
performed.

The utility function [(symbol-module x)] returns the module where
a symbol has been interned.

@@ Generic functions

JsLisp implements a generic dispatching methods for functions that
allow several implementations to be accessed using a single name
performing the required multiplex at runtime on general conditions.

[Generic functions
(defun fact (x)
  (* x (fact (1- x))))
;; ==> fact

(defmethod fact (x) (< x 2)
  1)
;; ==> (fact (< x 2))

(map #'fact (range 10))
;; ==> (1 1 2 6 24 120 720 5040 40320 362880)

(defmethod fact (x) (symbol? x)
  #"{x}!")
;; ==> (fact (symbol? x))

(fact 'x)
;; ==> x!

(fact 10)
;; ==> 3628800
]

The macro [(defmethod name args test &rest body)] is similar to
[defun] but adds a [test] condition that identifies when the
provided implementation is to be used. When this condition is
not satisfied then the previous definition of the function is
used instead.

@@ OOP support

JsLisp implements supports for Object Oriented Programming
paradigm using named JS objects and generic dispatching.

The [(defobject name fields)] defines a new object class with
the given name and also defines:

- a constructor prefixed with "[new-]" accepting positional arguments

- a constructor prefixed with "[make-]" accepting keyword arguments

- a type-check function by appending "[?]" to the class name

Also each instance of an object provides a meta-field named
"[%class]" that contains (as strings) the name of the class
and the names of all defined fields.

Each field in the [(defobject ...)] form can be either a symbol or
a list [(<symbol> <default>)] to specify values to be used instead of
[undefined] if the field value is not passed to the constructor.

Methods are implemented using the generic function dispatcher of
JsLisp [(defmethod ...)] and this allows both multimethods and
EQL-specializations of CLOS.

[Object Oriented Programming support
(defobject animal (name))
;; ==> animal

(defobject dog (name))
;; ==> dog

(defmethod animal? (x) (dog? x) true)
;; ==> (animal? (dog? x))

(defobject cat (name))
;; ==> cat

(defmethod animal? (x) (cat? x) true)
;; ==> (animal? (cat? x))

(animal? (new-dog "fido"))
;; ==> true

(defmethod run (x) (animal? x)
  (display ~"{x.name} is running"))
;; ==> (run (animal? x))

(defmethod sing (x) (dog? x)
  (display "woof!"))
;; ==> (sing (dog? x))

(defmethod sing (x) (cat? x)
  (display "meow!"))
;; ==> (sing (cat? x))

(defvar *tobi* (new-cat "tobi"))
;; ==> {"name":"tobi"}

(defvar *fido* (new-dog "fido"))
;; ==> {"name":"fido"}

(run *tobi*)
.tobi is running
;; ==> "tobi is running"

(run *fido*)
.fido is running
;; ==> "fido is running"

(defmethod run (x) (= x *tobi*)
  (display "no way ..."))
;; ==> (run (= x *tobi*))

(run (new-cat "sissi"))
.sissi is running
;; ==> "sissi is running"

(run *tobi*)
.no way ...
;; ==> "no way ..."

(sing *fido*)
.woof!
;; ==> "woof!"

(sing *tobi*)
.meow!
;; ==> "meow!"
]

@@ Treeshaker

JsLisp provides the ability to deploy a compiled program that contains
only the code that can possibly be executed explicitly from its main
function, leaving the code for all unused functions, macros and the
compiler itself out.

Also the produced Javascript code is minimized and this provides a
smaller download size, a faster startup and some protection of the
source code.

The easiest way to use the deploy function is to invoke JsLisp from
[node] command line program:

[node jslisp.js deploy.lisp myprogram.lisp > myprogram.js
]

As an example consider the chess playing program:

+--------------------------+-------+--------+------------+
|         filename         | lines |  bytes | startup(s) |
+--------------------------+-------+--------+------------+
| examples/chessboard.lisp |   189 |   8818 |            |
| examples/chess.lisp      |   843 |  31672 |            |
| gui.lisp                 |   399 |  16081 |            |
| graphics.lisp            |    90 |   3966 |            |
| boot.lisp                |  1874 |  72549 |            |
| jslisp.js                |  1819 |  66050 |            |
|                          |       |        |            |
| TOTAL                    |  5214 | 199136 |            |
| Download size (gzip)     |       |  40993 |            |
| Startup time             |       |        |      1.513 |
|                          |       |        |            |
| deploy.lisp output       |     1 |  33584 |            |
| Download size (gzip)     |       |   7822 |            |
| Startup time             |       |        |      0.034 |
+--------------------------+-------+--------+------------+

The compiled and minified version is a single line of Javascript with
a total length of 33584 that gizipped is a download of 7822 bytes.
The deployed file has no dependencies (except in the specific the
PNG images for the chess pieces), just loading it in a page will
pop-up the chessboard.

