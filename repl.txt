*1 JsLisp

= JsLisp
The Read Eval Print Loop

*2 Browser

JsLisp REPL user interface runs in
a browser and is implemented as a
single textarea element.

Usual cut/copy/paste commands can
be used freely.

*2 Expression evaluation

When [ENTER] is pressed with the cursor
at the very end of the textarea JsLisp
evaluates and displays the result of
what was present after the last prompt
[">> "] (if parenthesis were balanced).

*3 Goodies

JsLisp REPL provides some help for
entering JsLisp code:

- Parenthesis matching
- Autoindenting
- Word autocompletion
- Documentation lookup

*3.1 Parenthesis matching

Whenever the cursor is right after a closed
parenthesis [")"] the corresponding open
parenthesis is highlighted with a small red
rectangle.

Matching is always active, not only after
the last prompt. Matching knows about simple
quoted strings but not about interpolated
strings and reader macros in general.

*3.2 Autoidenting

When pressing [ENTER] the REPL auto-indents
next line placing the cursor where it will
most probably start next typing.

The rules are quite simple and there are no
hardcoded forms in the REPL.

*3.2.1 Autoindenting rules (1)
When an open parenthesis follows an open
parenthesis (nested lists like for [(let ...)]
forms) then the list elements are aligned
one character to the right in respect of
the containing list.

[[Let example
  (let ((x 10)
        (y 20)))
]]

*3.2.2 Autoidenting rules (2)
When the list looks like a regular form then
elements are aligned to where the [second]
element (i.e. the first parameter) was started.

[[Normal form example
  (draw-circle (/ (+ x1 x2) 2)
               (/ (+ y1 y2) 2)
               radius)
]]

*3.2.3 Autoindenting rules (3)
When the function or macro however has a
[&rest] parameter with name [body] then
all [body] elements will be indented
two spaces to the right of containing form:

[[Special forms
  (defun square     ;; Function name
         (x)        ;; Argument list
    (display "!")   ;; Body form 1
    (* x x))        ;; Body form 2
]]

*4.1 Word autocompletion (1)
Typing [ALT-/] invokes word autocompletion
filtering on the preceding characters and
proposes a first completion.

Typing [ALT-/] again cycles on selected
words, [Backspace] aborts and any other
character accepts the completion.

*4.2 Word autocompletion (2)
Words matching the already typed characters
are proposed in the following order:

- Backward from cursor to begin of textarea
- Forward from cursor to end of textarea
- All defined or imported words

*5.1 Documentation lookup (1)
JsLisp implements docstrings for function
and macro documentation.

The documentation is automatically shown
in the REPL and appears in the top-right
corner every time the cursor is standing
in a documented form after a small delay.

*5.2 Documentation lookup (2)
The docstring is displayed as is, with
the exception of text surrounded by
square brackets that is displayed in
bold and monospace.

The argument list is always available
and added to any explicit docstring.
Typing [ESC] hides the display.
