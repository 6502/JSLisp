(defun make-chessboard (x y sqsz)
  (let ((board (sprite *root*
                       (begin-path)
                       (move-to (* -4.125 sqsz) (* -4.125 sqsz))
                       (line-to (*  4.125 sqsz) (* -4.125 sqsz))
                       (line-to (*  4.125 sqsz) (*  4.125 sqsz))
                       (line-to (* -4.125 sqsz) (*  4.125 sqsz))
                       (close-path)
                       (fill "#808080")
                       (begin-path)
                       (move-to (* -4 sqsz) (* -4 sqsz))
                       (line-to (*  4 sqsz) (* -4 sqsz))
                       (line-to (*  4 sqsz) (*  4 sqsz))
                       (line-to (* -4 sqsz) (*  4 sqsz))
                       (close-path)
                       (fill "#C08040"))))
    (dotimes (y 8)
      (dotimes (j 4)
        (let ((x (+ (* j 2) (logand y 1))))
          (add-graphics board
                        (begin-path)
                        (move-to (* (- x 4) sqsz) (* (- y 4) sqsz))
                        (line-to (* (- x 3) sqsz) (* (- y 4) sqsz))
                        (line-to (* (- x 3) sqsz) (* (- y 3) sqsz))
                        (line-to (* (- x 4) sqsz) (* (- y 3) sqsz))
                        (close-path)
                        (fill "#E0C0A0")))))
    (let ((sq (list (list "r" "n" "b" "q" "k" "b" "n" "r")
                    (list "p" "p" "p" "p" "p" "p" "p" "p")
                    (list "." "." "." "." "." "." "." ".")
                    (list "." "." "." "." "." "." "." ".")
                    (list "." "." "." "." "." "." "." ".")
                    (list "." "." "." "." "." "." "." ".")
                    (list "P" "P" "P" "P" "P" "P" "P" "P")
                    (list "R" "N" "B" "Q" "K" "B" "N" "R"))))
      (dotimes (y 8)
        (dotimes (x 8)
          (let ((c [[sq y] x]))
            (if (= c ".")
                (setf [[sq y] x] null)
                (let ((s (sprite board))
                      (xx x)
                      (yy y))
                  (load-image s ~"{c}.png" 0 0)
                  (setf [[sq yy] xx] s)
                  (scale s (/ sqsz 150))
                  (translate s
                             (* (- xx 3.5) sqsz)
                             (* (- yy 3.5) sqsz))
                  (labels ((ijmap (x y)
                             (let* ((rp (revxform x y (total-matrix board)))
                                    (i (+ 4 (floor (/ (first rp) sqsz))))
                                    (j (+ 4 (floor (/ (second rp) sqsz)))))
                               (list i j))))
                    (let ((tx null)
                          (ty null))
                      (setf s.hit
                            (lambda (sx sy mode)
                              (let* ((rp (revxform sx sy (total-matrix s.parent)))
                                     (x (first rp))
                                     (y (second rp)))
                                (cond
                                  ((= mode 0)
                                   (set-parent s s.parent)
                                   (setf tx x)
                                   (setf ty y))
                                  ((= mode 1)
                                   (translate s (- x tx) (- y ty))
                                   (setf tx x)
                                   (setf ty y))
                                  (true
                                   (let* ((ij (ijmap sx sy))
                                          (i (first ij))
                                          (j (second ij)))
                                     (set-translation s (* (- i 3.5) sqsz) (* (- j 3.5) sqsz))
                                     (setf [[sq yy] xx] null)
                                     (when [[sq j] i]
                                           (set-parent [[sq j] i] null))
                                     (setf [[sq j] i] s)
                                     (setf xx i)
                                     (setf yy j)))))))))))))))
    (setf board.hit (drag board))
    (translate board x y)
    board))
